<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zachary&#39;Blog</title>
  <subtitle>做个有趣的人。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-18T04:21:28.446Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>朱两边</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ios和android 浏览器适配问题记录</title>
    <link href="http://yoursite.com/2017/08/11/ios%E5%92%8Candroid%20%E6%B5%8F%E8%A7%88%E5%99%A8%E9%80%82%E9%85%8D%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/08/11/ios和android 浏览器适配问题记录/</id>
    <published>2017-08-11T01:39:08.000Z</published>
    <updated>2017-08-18T04:21:28.446Z</updated>
    
    <content type="html"><![CDATA[<p>参与手机端页面开发也有一段时间了，在此记录一些工作中遇到的ios和android 浏览器适配问题以及相应的解决方案，会持续更新。<br><a id="more"></a></p>
<h3 id="移动端translateZ会影响定位元素的z-index"><a href="#移动端translateZ会影响定位元素的z-index" class="headerlink" title="移动端translateZ会影响定位元素的z-index"></a>移动端translateZ会影响定位元素的z-index</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">解决方案：给定位的元素也添加translateZ(npx),其中n需要大于其余translateZ的值。</div></pre></td></tr></table></figure>
<h3 id="IOS移动端click事件300ms的延迟响应"><a href="#IOS移动端click事件300ms的延迟响应" class="headerlink" title="IOS移动端click事件300ms的延迟响应"></a>IOS移动端click事件300ms的延迟响应</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">移动设备上的web网页是有300ms延迟的，玩玩会造成按钮点击延迟甚至是点击失效。这是由于区分单击事件和双击屏幕缩放的历史原因造成的,</div><div class="line">2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，你就能看清该部分放大后的内容，再次双击后能回到原始状态。</div><div class="line">双击缩放是指用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。</div><div class="line">原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;，此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为300毫秒。这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。</div><div class="line">解决方案：</div><div class="line">fastclick可以解决在手机上点击事件的300ms延迟</div><div class="line">zepto的touch模块，tap事件也是为了解决在click的延迟问题</div><div class="line">触摸事件的响应顺序为 touchstart --&gt; touchmove --&gt; touchend --&gt; click,也可以通过绑定ontouchstart事件，加快对事件的响应，解决300ms延迟问题</div></pre></td></tr></table></figure>
<h3 id="一些情况下对非可点击元素如-label-span-监听click事件，ios下不会触发"><a href="#一些情况下对非可点击元素如-label-span-监听click事件，ios下不会触发" class="headerlink" title="一些情况下对非可点击元素如(label,span)监听click事件，ios下不会触发"></a>一些情况下对非可点击元素如(label,span)监听click事件，ios下不会触发</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">解决方案：css增加cursor:pointer;</div></pre></td></tr></table></figure>
<h3 id="三星手机遮罩层下的input、select、a等元素可以被点击和focus-点击穿透"><a href="#三星手机遮罩层下的input、select、a等元素可以被点击和focus-点击穿透" class="headerlink" title="三星手机遮罩层下的input、select、a等元素可以被点击和focus(点击穿透)"></a>三星手机遮罩层下的input、select、a等元素可以被点击和focus(点击穿透)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">问题发现于三星手机，这个在特定需求下才会有，因此如果没有类似问题的可以不看。首先需求是浮层操作，在三星上被遮罩的元素依然可以获取focus、click、change)，有两种解决方案：</div><div class="line">1.是通过层显示以后加入对应的class名控制，截断显示层下方可获取焦点元素的事件获取</div><div class="line">2.是通过将可获取焦点元素加入的disabled属性，也可以利用属性加dom锁定的方式（disabled的一种变换方式）</div></pre></td></tr></table></figure>
<h3 id="h5页面当输入框在最底部，点击软键盘后输入框会被遮挡。"><a href="#h5页面当输入框在最底部，点击软键盘后输入框会被遮挡。" class="headerlink" title="h5页面当输入框在最底部，点击软键盘后输入框会被遮挡。"></a>h5页面当输入框在最底部，点击软键盘后输入框会被遮挡。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//可采用如下方式解决</div><div class="line">var oHeight = $(document).height(); //浏览器当前的高度</div><div class="line">$(window).resize(function()&#123; </div><div class="line">    if($(document).height() &lt; oHeight)&#123; </div><div class="line">          $(&quot;#footer&quot;).css(&quot;position&quot;,&quot;static&quot;); </div><div class="line">    &#125;else&#123; </div><div class="line">          $(&quot;#footer&quot;).css(&quot;position&quot;,&quot;absolute&quot;);</div><div class="line">    &#125; </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="不让-Android-手机识别邮箱"><a href="#不让-Android-手机识别邮箱" class="headerlink" title="不让 Android 手机识别邮箱"></a>不让 Android 手机识别邮箱</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta content=&quot;email=no&quot; name=&quot;format-detection&quot; /&gt;</div></pre></td></tr></table></figure>
<h3 id="禁止-iOS-识别长串数字为电话"><a href="#禁止-iOS-识别长串数字为电话" class="headerlink" title="禁止 iOS 识别长串数字为电话"></a>禁止 iOS 识别长串数字为电话</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta content=&quot;telephone=no&quot; name=&quot;format-detection&quot; /&gt;</div></pre></td></tr></table></figure>
<h3 id="禁止-iOS-弹出各种操作窗口"><a href="#禁止-iOS-弹出各种操作窗口" class="headerlink" title="禁止 iOS 弹出各种操作窗口"></a>禁止 iOS 弹出各种操作窗口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-touch-callout:none</div></pre></td></tr></table></figure>
<h3 id="禁止ios和android用户选中文字"><a href="#禁止ios和android用户选中文字" class="headerlink" title="禁止ios和android用户选中文字"></a>禁止ios和android用户选中文字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-user-select:none</div></pre></td></tr></table></figure>
<h3 id="ios下取消input在输入的时候英文首字母的默认大写"><a href="#ios下取消input在输入的时候英文首字母的默认大写" class="headerlink" title="ios下取消input在输入的时候英文首字母的默认大写"></a>ios下取消input在输入的时候英文首字母的默认大写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input autocapitalize=&quot;off&quot; autocorrect=&quot;off&quot; /&gt;</div></pre></td></tr></table></figure>
<h3 id="在ios和andriod中-audio元素和video元素无法自动播放"><a href="#在ios和andriod中-audio元素和video元素无法自动播放" class="headerlink" title="在ios和andriod中,audio元素和video元素无法自动播放"></a>在ios和andriod中,audio元素和video元素无法自动播放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(&apos;html&apos;).one(&apos;touchstart&apos;,function()&#123; audio.play()&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>参考链接：<a href="http://www.jianshu.com/p/31e53df2ecce" target="_blank" rel="external">http://www.jianshu.com/p/31e53df2ecce</a><br>來源：简书</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参与手机端页面开发也有一段时间了，在此记录一些工作中遇到的ios和android 浏览器适配问题以及相应的解决方案，会持续更新。&lt;br&gt;
    
    </summary>
    
      <category term="兼容问题" scheme="http://yoursite.com/categories/%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="ios" scheme="http://yoursite.com/tags/ios/"/>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>webpack踩坑记录</title>
    <link href="http://yoursite.com/2017/08/01/webpack%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/08/01/webpack踩坑记录/</id>
    <published>2017-08-01T13:13:25.000Z</published>
    <updated>2017-08-18T04:21:25.831Z</updated>
    
    <content type="html"><![CDATA[<p>在此记录学习webpack过程中踩过的坑，将自身实际操作过程中遇到的问题记录下来，用于后续回顾。<br><a id="more"></a></p>
<h3 id="xxx-loader省略-loader带来的问题"><a href="#xxx-loader省略-loader带来的问题" class="headerlink" title="xxx-loader省略-loader带来的问题"></a>xxx-loader省略-loader带来的问题</h3><p>在老版本的webpack中，可以用省略的写法来写loader，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">loaders: [&#123;</div><div class="line">  test: /\.css$/, </div><div class="line">  loader: &quot;style!css&quot;</div><div class="line"> &#125;],</div></pre></td></tr></table></figure></p>
<p>但在现在新版本中，已经不允许省略写法了，必须使用全称，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">loaders: [&#123;</div><div class="line">  test: /\.css$/, </div><div class="line">  loader: &quot;style-loader!css-loader&quot;</div><div class="line"> &#125;],</div></pre></td></tr></table></figure></p>
<h3 id="在js中require-css-后，样式嵌入在js中，没有独立的css文件"><a href="#在js中require-css-后，样式嵌入在js中，没有独立的css文件" class="headerlink" title="在js中require(css)后，样式嵌入在js中，没有独立的css文件"></a>在js中require(css)后，样式嵌入在js中，没有独立的css文件</h3><p>webpack的默认设置中，如果没有引入特殊的第三方插件，在js中require的css文件是会自动写入到相应打包出的js中的，这样有以下缺点:</p>
<ul>
<li>js是阻塞加载的，样式会出现很慢</li>
<li>没有单独的css文件，缓存也不便，而且不符合开发习惯</li>
</ul>
<p>需要引入一个第三方插件 <strong>extract-text-webpack-plugin</strong>，具体如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//头部引入css打包插件</div><div class="line">const ExtractTextPlugin = require(&quot;extract-text-webpack-plugin&quot;);</div><div class="line"></div><div class="line">//声明对应的loaders</div><div class="line">loaders: [&#123;</div><div class="line">  test: /\.css$/,</div><div class="line">  //请注意loader里的写法，有一些低版本的例子中是过时的写法</div><div class="line">  loader: ExtractTextPlugin.extract(&#123;</div><div class="line">    fallback: &quot;style-loader&quot;,</div><div class="line">    use: &quot;css-loader&quot;</div><div class="line">  &#125;)</div><div class="line">&#125;],</div><div class="line"></div><div class="line">plugins: [</div><div class="line">  ...</div><div class="line">  //这样会定义，所有js文件中通过require引入的css都会被打包成相应文件名字的css</div><div class="line">  new ExtractTextPlugin(&quot;[name].css&quot;),</div><div class="line">],</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意，以上loaders和plugins中都必须声明，缺一不可</p>
</blockquote>
<h3 id="ExtractTextPlugin-插件loader写法不对导致报错"><a href="#ExtractTextPlugin-插件loader写法不对导致报错" class="headerlink" title="ExtractTextPlugin 插件loader写法不对导致报错"></a>ExtractTextPlugin 插件loader写法不对导致报错</h3><p>在引用ExtractTextPlugin 插件时，使用了如下写法，会导致报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">loaders: [&#123;</div><div class="line">  test: /\.css$/,</div><div class="line">  loader: ExtractTextPlugin.extract([&quot;style-loader&quot;,&quot;css-loader&quot;])</div><div class="line">&#125;],</div></pre></td></tr></table></figure></p>
<p>原因是这种写法已经过时，在新版本中，根据命令台中的提示，修改为最新写法即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">loaders: [&#123;</div><div class="line">  test: /\.css$/,</div><div class="line">  loader: ExtractTextPlugin.extract(&#123;</div><div class="line">    fallback: &quot;style-loader&quot;,</div><div class="line">    use: &quot;css-loader&quot;</div><div class="line">  &#125;)</div><div class="line">&#125;],</div></pre></td></tr></table></figure></p>
<h3 id="chunkhash只适用于js和css，img仍与font文件然需要用到hash"><a href="#chunkhash只适用于js和css，img仍与font文件然需要用到hash" class="headerlink" title="chunkhash只适用于js和css，img仍与font文件然需要用到hash"></a>chunkhash只适用于js和css，img仍与font文件然需要用到hash</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">loaders: [</div><div class="line"> &#123;test:/\.(png|gif|jpg|jpeg|bmp)$/i,loader:&apos;url-loader?limit=5000&amp;name=img/[name].[hash].[ext]&apos;&#125;,</div><div class="line"> &#123; test:/\.(woff|woff2|svg|ttf|eot)($|\?)/i, loader:&apos;url-loader?limit=5000&amp;name=fonts/[name].[hash].[ext]&apos;&#125;</div><div class="line"> ],</div></pre></td></tr></table></figure>
<h3 id="js和js引入的css的chunkhash相同的"><a href="#js和js引入的css的chunkhash相同的" class="headerlink" title="js和js引入的css的chunkhash相同的"></a>js和js引入的css的chunkhash相同的</h3><p>webpack的编译理念，webpack将css视为js的一部分，所以在计算chunkhash时，会把所有的js代码和css代码混合在一起计算，解决方案如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// css是使用ExtractTextPlugin插件引入的，这时候可以使用到这个插件提供的contenthash</div><div class="line">new ExtractTextPlugin(&quot;[name]-[contenthash].css&quot;)</div></pre></td></tr></table></figure></p>
<h3 id="react组件中img标签src指向的图片不能被打包"><a href="#react组件中img标签src指向的图片不能被打包" class="headerlink" title="react组件中img标签src指向的图片不能被打包"></a>react组件中img标签src指向的图片不能被打包</h3><p>在react组件里的src需要采用以下写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&#123;require(&apos;../../xxx/xxx.png&apos;)&#125; alt=&quot;&quot;/&gt;</div></pre></td></tr></table></figure></p>
<hr>
<p>暂时先记录以上，后续踩坑会持续更新。</p>
<blockquote>
<p>参考资料：<a href="http://www.jianshu.com/p/42e11515c10f" target="_blank" rel="external">入门Webpack，看这篇就够了</a>&emsp;&emsp;<a href="http://www.cnblogs.com/ihardcoder/p/5623411.html" target="_blank" rel="external">Webpack中hash与chunkhash的区别</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在此记录学习webpack过程中踩过的坑，将自身实际操作过程中遇到的问题记录下来，用于后续回顾。&lt;br&gt;
    
    </summary>
    
      <category term="构建工具" scheme="http://yoursite.com/categories/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>仿Vue双向绑定demo</title>
    <link href="http://yoursite.com/2017/05/12/%E4%BB%BFVue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9Ademo/"/>
    <id>http://yoursite.com/2017/05/12/仿Vue双向绑定demo/</id>
    <published>2017-05-12T01:39:08.000Z</published>
    <updated>2017-08-18T04:22:50.547Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文主要尝试使用es6新特性Object.defineProperty()来实现一个简单的双向绑定案例。<br>相关代码已经放在 <a href="https://github.com/Zacharyweb" target="_blank" rel="external">Github</a>，会持续更新。</p>
</blockquote>
<a id="more"></a>
<h2 id="Vue双向绑定实现过程"><a href="#Vue双向绑定实现过程" class="headerlink" title="Vue双向绑定实现过程"></a>Vue双向绑定实现过程</h2><p>从开始接触Vue开始，我们便对它的“数据响应”赞叹不绝。我们知道，Vue的双向绑定是基于es6的Object.defineProperty()方法实现的，Vue通过Object.defineProperty()来实现对数据的劫持，并触发对视图的更新工作。展开来说，当数据改变时，Object.defineProperty()对属性设置一个set函数，当数据改变时就会触发这个函数，所以我们只要将更新方法放在里面就可以实现数据到视图的更新了。如果还不熟悉其用法，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">请点击这里阅读更多用法</a>。</p>
<h2 id="本案例实现步骤"><a href="#本案例实现步骤" class="headerlink" title="本案例实现步骤"></a>本案例实现步骤</h2><p>1.实现一个监听器Observer，用来劫持并监听所有属性，如有变动，就通知订阅者Watcher。<br>2.实现一个订阅者Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。<br>3.实现一个关联者Dep，将Observer和Watcher关联起来。<br>4.实现一个解析器Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。</p>
<h3 id="实现一个Observer"><a href="#实现一个Observer" class="headerlink" title="实现一个Observer"></a>实现一个Observer</h3><p>Observer是一个数据监听器，其实现核心方法就是前文所说的Object.defineProperty( )。如果要对所有属性都进行监听的话，那么可以通过递归方法遍历所有属性值，并对其进行Object.defineProperty( )处理。思路分析中，还需要创建一个可以容纳订阅者的消息订阅器Dep，订阅器Dep主要负责收集订阅者，然后再属性变化的时候执行对应订阅者的更新函数。所以显然订阅器需要有一个容器，这个容器就是list，将上面的Observer稍微改造下，植入消息订阅器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">function defineReactive(data, key, val) &#123;</div><div class="line">    observe(val); // 递归遍历所有子属性</div><div class="line">    var dep = new Dep(); </div><div class="line">    Object.defineProperty(data, key, &#123;</div><div class="line">        enumerable: true,</div><div class="line">        configurable: true,</div><div class="line">        get: function() &#123;</div><div class="line">            if (是否需要添加订阅者) &#123;</div><div class="line">                dep.addSub(watcher); // 在这里添加一个订阅者</div><div class="line">            &#125;</div><div class="line">            return val;</div><div class="line">        &#125;,</div><div class="line">        set: function(newVal) &#123;</div><div class="line">            if (val === newVal) &#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            val = newVal;</div><div class="line">            console.log(&apos;属性&apos; + key + &apos;已经被监听了，现在值为：“&apos; + newVal.toString() + &apos;”&apos;);</div><div class="line">            dep.notify(); // 如果数据变化，通知所有订阅者</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">function Dep () &#123;</div><div class="line">    this.subs = [];</div><div class="line">&#125;</div><div class="line">Dep.prototype = &#123;</div><div class="line">    addSub: function(sub) &#123;</div><div class="line">        this.subs.push(sub);</div><div class="line">    &#125;,</div><div class="line">    notify: function() &#123;</div><div class="line">        this.subs.forEach(function(sub) &#123;</div><div class="line">            sub.update();</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>从代码上看，我们将订阅器Dep添加一个订阅者设计在getter里面，这是为了让Watcher初始化进行触发，因此需要判断是否要添加订阅者，至于具体设计方案，下文会详细说明的。在setter函数里面，如果数据变化，就会去通知所有订阅者，订阅者们就会去执行对应的更新的函数。到此为止，一个比较完整Observer已经实现了，接下来我们开始设计Watcher。  </p>
<h3 id="实现Watcher"><a href="#实现Watcher" class="headerlink" title="实现Watcher"></a>实现Watcher</h3><p>订阅者Watcher在初始化的时候需要将自己添加进订阅器Dep中，那该如何添加呢？我们已经知道监听器Observer是在get函数执行了添加订阅者Wather的操作的，所以我们只要在订阅者Watcher初始化的时候出发对应的get函数去执行添加订阅者操作即可，那要如何触发get的函数，再简单不过了，只要获取对应的属性值就可以触发了，核心原因就是因为我们使用了Object.defineProperty( )进行数据监听。这里还有一个细节点需要处理，我们只要在订阅者Watcher初始化的时候才需要添加订阅者，所以需要做一个判断操作，因此可以在订阅器上做一下手脚：在Dep.target上缓存下订阅者，添加成功后再将其去掉就可以了。订阅者Watcher的实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">function Watcher(vm, exp, cb) &#123;</div><div class="line">    this.cb = cb;</div><div class="line">    this.vm = vm;</div><div class="line">    this.exp = exp;</div><div class="line">    this.value = this.get();  // 将自己添加到订阅器的操作</div><div class="line">&#125;</div><div class="line"> </div><div class="line">Watcher.prototype = &#123;</div><div class="line">    update: function() &#123;</div><div class="line">        this.run();</div><div class="line">    &#125;,</div><div class="line">    run: function() &#123;</div><div class="line">        var value = this.vm.data[this.exp];</div><div class="line">        var oldVal = this.value;</div><div class="line">        if (value !== oldVal) &#123;</div><div class="line">            this.value = value;</div><div class="line">            this.cb.call(this.vm, value, oldVal);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    get: function() &#123;</div><div class="line">        Dep.target = this;  // 缓存自己</div><div class="line">        var value = this.vm.data[this.exp]  // 强制执行监听器里的get函数</div><div class="line">        Dep.target = null;  // 释放自己</div><div class="line">        return value;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>这时候，我们需要对监听器Observer也做个稍微调整，主要是对应Watcher类原型上的get函数。需要调整地方在于defineReactive函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">function defineReactive(data, key, val) &#123;</div><div class="line">    observe(val); // 递归遍历所有子属性</div><div class="line">    var dep = new Dep(); </div><div class="line">    Object.defineProperty(data, key, &#123;</div><div class="line">        enumerable: true,</div><div class="line">        configurable: true,</div><div class="line">        get: function() &#123;</div><div class="line">            if (Dep.target) &#123;.  // 判断是否需要添加订阅者</div><div class="line">                dep.addSub(Dep.target); // 在这里添加一个订阅者</div><div class="line">            &#125;</div><div class="line">            return val;</div><div class="line">        &#125;,</div><div class="line">        set: function(newVal) &#123;</div><div class="line">            if (val === newVal) &#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            val = newVal;</div><div class="line">            console.log(&apos;属性&apos; + key + &apos;已经被监听了，现在值为：“&apos; + newVal.toString() + &apos;”&apos;);</div><div class="line">            dep.notify(); // 如果数据变化，通知所有订阅者</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">Dep.target = null;</div></pre></td></tr></table></figure></p>
<p>到此为止，简单版的Watcher设计完毕，这时候我们只要将Observer和Watcher关联起来，就可以实现一个简单的双向绑定数据了。因为这里没有还没有设计解析器Compile，所以对于模板数据我们都进行写死处理，假设模板上又一个节点，且id号为’name’，并且双向绑定的绑定的变量也为’name’，且是通过两个大双括号包起来（这里只是为了掩饰，暂时没什么用处），模板如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;h1 id=&quot;name&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure></p>
<p>这时候我们需要将Observer和Watcher关联起来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function DemoVue (data, el, exp) &#123;</div><div class="line">    this.data = data;</div><div class="line">    observe(data);</div><div class="line">    el.innerHTML = this.data[exp];  // 初始化模板数据的值</div><div class="line">    new Watcher(this, exp, function (value) &#123;</div><div class="line">        el.innerHTML = value;</div><div class="line">    &#125;);</div><div class="line">    return this;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在页面上new以下DemoVue类，就可以实现数据的双向绑定了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;h1 id=&quot;name&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;script src=&quot;js/observer.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;js/watcher.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;js/index.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    var ele = document.querySelector(&apos;#name&apos;);</div><div class="line">    var selfVue = new DemoVue(&#123;</div><div class="line">        name: &apos;hello world&apos;</div><div class="line">    &#125;, ele, &apos;name&apos;);</div><div class="line"> </div><div class="line">    window.setTimeout(function () &#123;</div><div class="line">        console.log(&apos;name值改变了&apos;);</div><div class="line">        selfVue.data.name = &apos;canfoo&apos;;</div><div class="line">    &#125;, 2000);</div><div class="line"> </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>这时候打开页面，可以看到页面刚开始显示了是’hello world’，过了2s后就变成’canfoo’了。到这里，总算大功告成一半了，但是还有一个细节问题，我们在赋值的时候是这样的形式 ‘  selfVue.data.name = ‘canfoo’  ‘ 而我们理想的形式是’  selfVue.name = ‘canfoo’  ‘为了实现这样的形式，我们需要在new DemoVue的时候做一个代理处理，让访问selfVue的属性代理为访问selfVue.data的属性，实现原理还是使用Object.defineProperty( )对属性值再包一层：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">function DemoVue (data, el, exp) &#123;</div><div class="line">    var self = this;</div><div class="line">    this.data = data;</div><div class="line"> </div><div class="line">    Object.keys(data).forEach(function(key) &#123;</div><div class="line">        self.proxyKeys(key);  // 绑定代理属性</div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    observe(data);</div><div class="line">    el.innerHTML = this.data[exp];  // 初始化模板数据的值</div><div class="line">    new Watcher(this, exp, function (value) &#123;</div><div class="line">        el.innerHTML = value;</div><div class="line">    &#125;);</div><div class="line">    return this;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">DemoVue.prototype = &#123;</div><div class="line">    proxyKeys: function (key) &#123;</div><div class="line">        var self = this;</div><div class="line">        Object.defineProperty(this, key, &#123;</div><div class="line">            enumerable: false,</div><div class="line">            configurable: true,</div><div class="line">            get: function proxyGetter() &#123;</div><div class="line">                return self.data[key];</div><div class="line">            &#125;,</div><div class="line">            set: function proxySetter(newVal) &#123;</div><div class="line">                self.data[key] = newVal;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="实现Compile"><a href="#实现Compile" class="headerlink" title="实现Compile"></a>实现Compile</h3><p>虽然上面已经实现了一个双向数据绑定的例子，但是整个过程都没有去解析dom节点，而是直接固定某个节点进行替换数据的，所以接下来需要实现一个解析器Compile来做解析和绑定工作。解析器Compile实现步骤：<br>1.解析模板指令，并替换模板数据，初始化视图<br>2.将模板指令对应的节点绑定对应的更新函数，初始化相应的订阅器<br>为了解析模板，首先需要获取到dom元素，然后对含有dom元素上含有指令的节点进行处理，因此这个环节需要对dom操作比较频繁，所有可以先建一个fragment片段，将需要解析的dom节点存入fragment片段里再进行处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function nodeToFragment (el) &#123;</div><div class="line">    var fragment = document.createDocumentFragment();</div><div class="line">    var child = el.firstChild;</div><div class="line">    while (child) &#123;</div><div class="line">        // 将Dom元素移入fragment中</div><div class="line">        fragment.appendChild(child);</div><div class="line">        child = el.firstChild</div><div class="line">    &#125;</div><div class="line">    return fragment;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来需要遍历各个节点，对含有相关指定的节点进行特殊处理，这里咱们先处理最简单的情况，只对带有双花括号这种形式的指令进行处理：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">function compileElement (el) &#123;</div><div class="line">    var childNodes = el.childNodes;</div><div class="line">    var self = this;</div><div class="line">    [].slice.call(childNodes).forEach(function(node) &#123;</div><div class="line">        var reg = /\&#123;\&#123;(.*)\&#125;\&#125;/;</div><div class="line">        var text = node.textContent;</div><div class="line"> </div><div class="line">        if (self.isTextNode(node) &amp;&amp; reg.test(text)) &#123;  // 判断是否是符合这种形式&#123;&#123;&#125;&#125;的指令</div><div class="line">            self.compileText(node, reg.exec(text)[1]);</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        if (node.childNodes &amp;&amp; node.childNodes.length) &#123;</div><div class="line">            self.compileElement(node);  // 继续递归遍历子节点</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;,</div><div class="line">function compileText (node, exp) &#123;</div><div class="line">    var self = this;</div><div class="line">    var initText = this.vm[exp];</div><div class="line">    this.updateText(node, initText);  // 将初始化的数据初始化到视图中</div><div class="line">    new Watcher(this.vm, exp, function (value) &#123;  // 生成订阅器并绑定更新函数</div><div class="line">        self.updateText(node, value);</div><div class="line">    &#125;);</div><div class="line">&#125;,</div><div class="line">function (node, value) &#123;</div><div class="line">    node.textContent = typeof value == &apos;undefined&apos; ? &apos;&apos; : value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取到最外层节点后，调用compileElement函数，对所有子节点进行判断，如果节点是文本节点且匹配双花括号这种形式指令的节点就开始进行编译处理，编译处理首先需要初始化视图数据，对应上面所说的步骤1，接下去需要生成一个并绑定更新函数的订阅器，对应上面所说的步骤2。这样就完成指令的解析、初始化、编译三个过程，一个解析器Compile也就可以正常的工作了。为了将解析器Compile与监听器Observer和订阅者Watcher关联起来，我们需要再修改一下类DemoVue函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function DemoVue (options) &#123;</div><div class="line">    var self = this;</div><div class="line">    this.vm = this;</div><div class="line">    this.data = options;</div><div class="line"> </div><div class="line">    Object.keys(this.data).forEach(function(key) &#123;</div><div class="line">        self.proxyKeys(key);</div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    observe(this.data);</div><div class="line">    new Compile(options, this.vm);</div><div class="line">    return this;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>更改后，我们就不要像之前通过传入固定的元素值进行双向绑定了，可以随便命名各种变量进行双向绑定了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;app&quot;&gt;</div><div class="line">        &lt;h2&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</div><div class="line">        &lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;script src=&quot;js/observer.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;js/watcher.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;js/compile.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;js/index.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line"> </div><div class="line">    var selfVue = new DemoVue(&#123;</div><div class="line">        el: &apos;#app&apos;,</div><div class="line">        data: &#123;</div><div class="line">            title: &apos;hello world&apos;,</div><div class="line">            name: &apos;&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    window.setTimeout(function () &#123;</div><div class="line">        selfVue.title = &apos;你好&apos;;</div><div class="line">    &#125;, 2000);</div><div class="line"> </div><div class="line">    window.setTimeout(function () &#123;</div><div class="line">        selfVue.name = &apos;canfoo&apos;;</div><div class="line">    &#125;, 2500);</div><div class="line"> </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>如上代码，在页面上可观察到，刚开始titile和name分别被初始化为 ‘hello world’ 和空，2s后title被替换成 ‘你好’ 3s后name被替换成 ‘canfoo’ 了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要尝试使用es6新特性Object.defineProperty()来实现一个简单的双向绑定案例。&lt;br&gt;相关代码已经放在 &lt;a href=&quot;https://github.com/Zacharyweb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;，会持续更新。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="框架学习" scheme="http://yoursite.com/categories/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="双向绑定" scheme="http://yoursite.com/tags/%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令汇总</title>
    <link href="http://yoursite.com/2017/02/23/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2017/02/23/git常用命令汇总/</id>
    <published>2017-02-23T07:54:06.000Z</published>
    <updated>2017-08-18T13:17:59.695Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些常用的git命令。<br> <a id="more"></a></p>
<h2 id="Git命令汇总"><a href="#Git命令汇总" class="headerlink" title="Git命令汇总"></a>Git命令汇总</h2><h3 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h3><ul>
<li>配置本地仓库</li>
<li>常用git config –global user.name、git config –global user.email</li>
<li>git config –list查看配置详情</li>
</ul>
<h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><p>初始一个仓库，添加–bare可以初始化一个共享（裸）仓库</p>
<h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p>可以查看当前仓库的状态</p>
<h3 id="git-add-“文件”"><a href="#git-add-“文件”" class="headerlink" title="git add “文件”"></a>git add “文件”</h3><p>将工作区中的文件添加到暂存区中，其中file可是一个单独的文件，也可以是一个目录、“*”、-A</p>
<h3 id="git-commit-m-‘备注信息’"><a href="#git-commit-m-‘备注信息’" class="headerlink" title="git commit -m ‘备注信息’"></a>git commit -m ‘备注信息’</h3><p>将暂存区的文件，提交到本地仓库</p>
<h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><p>可以查看本地仓库的提交历史</p>
<h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><p>查看分支</p>
<h3 id="git-branch-“分支名称”"><a href="#git-branch-“分支名称”" class="headerlink" title="git branch “分支名称”"></a>git branch “分支名称”</h3><p>创建一个新的分支</p>
<h3 id="git-checkout-“分支名称”"><a href="#git-checkout-“分支名称”" class="headerlink" title="git checkout “分支名称”"></a>git checkout “分支名称”</h3><p>切换分支</p>
<h3 id="git-checkout-b-deeveloper"><a href="#git-checkout-b-deeveloper" class="headerlink" title="git checkout -b deeveloper"></a>git checkout -b deeveloper</h3><p>创建并切到developer分支</p>
<h3 id="git-merge-“分支名称”"><a href="#git-merge-“分支名称”" class="headerlink" title="git merge “分支名称”"></a>git merge “分支名称”</h3><p>合并分支</p>
<h3 id="git-branch-d-“分支名称”"><a href="#git-branch-d-“分支名称”" class="headerlink" title="git branch -d “分支名称”"></a>git branch -d “分支名称”</h3><p>删除分支</p>
<h3 id="git-clone-“仓库地址”"><a href="#git-clone-“仓库地址”" class="headerlink" title="git clone “仓库地址”"></a>git clone “仓库地址”</h3><p>获取已有仓库的副本，会默认创建master分支</p>
<h3 id="git-push-origin-“本地分支名称-远程分支名称”"><a href="#git-push-origin-“本地分支名称-远程分支名称”" class="headerlink" title="git push origin “本地分支名称:远程分支名称”"></a>git push origin “本地分支名称:远程分支名称”</h3><p>将本地分支推送至远程仓库</p>
<h3 id="git-push-origin-hotfix（通常的写法）"><a href="#git-push-origin-hotfix（通常的写法）" class="headerlink" title="git push origin hotfix（通常的写法）"></a>git push origin hotfix（通常的写法）</h3><p>相当于</p>
<ul>
<li>git push origin hotfix:hotfix</li>
<li>git push origin hotfix:newfeature</li>
</ul>
<p>本地仓库分支名称和远程仓库分支名称一样的情况下可以简写成一个，即git push “仓库地址” “分支名称”，如果远程仓库没有对应分支，将会自动创建</p>
<h3 id="git-remote-add-“主机名称”-“远程仓库地址”添"><a href="#git-remote-add-“主机名称”-“远程仓库地址”添" class="headerlink" title="git remote add “主机名称” “远程仓库地址”添"></a>git remote add “主机名称” “远程仓库地址”添</h3><p>加远程主机，即给远程主机起个别名，方便使用</p>
<h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><p>可以查看已添加的远程主机</p>
<h3 id="git-remote-show-“主机名称”"><a href="#git-remote-show-“主机名称”" class="headerlink" title="git remote show “主机名称”"></a>git remote show “主机名称”</h3><p>可以查看远程主机的信息</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些常用的git命令。&lt;br&gt;
    
    </summary>
    
      <category term="辅助工具" scheme="http://yoursite.com/categories/%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git基础学习与使用(3)</title>
    <link href="http://yoursite.com/2016/07/03/git%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8(3)/"/>
    <id>http://yoursite.com/2016/07/03/git基础学习与使用(3)/</id>
    <published>2016-07-03T07:54:06.000Z</published>
    <updated>2017-08-18T12:56:52.780Z</updated>
    
    <content type="html"><![CDATA[<p>通过上面学习我们可以很好的管理本地版本控制了，可是如果我们下班回到家里突然来了灵感觉得有部分代码可以优化，如果能接着公司电脑上的代码继续写该有多好呀！另一种情形，假设项目比较大，不同的功能模块由不同的开发人员完成，不同模块儿之间又难免会依赖关系，这时如果我们的代码互相合并（融合）该有多好呀！所有模块开发完毕后，需要整合到一起，要能做到准确无误该有多好呀！借助一个远程仓库，大家可以共享代码、历史版本等数据，便可以解决以上遇到的所有问题，在学习远程仓库前我们先来学习git clone path这个命令。<br> <a id="more"></a></p>
<h2 id="Git远程仓库"><a href="#Git远程仓库" class="headerlink" title="Git远程仓库"></a>Git远程仓库</h2><h3 id="获取已有仓库的副本"><a href="#获取已有仓库的副本" class="headerlink" title="获取已有仓库的副本"></a>获取已有仓库的副本</h3><p>例已存在Git仓库blog,在blog这个目录同级执行,执行以下命令：git clone ./blog 目录名称。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> ./copy/ demo</div></pre></td></tr></table></figure></p>
<p><img src="http://i1.bvimg.com/607087/d0a3f5a6ff102413.png" alt="Git"></p>
<h3 id="进入到demo目录中"><a href="#进入到demo目录中" class="headerlink" title="进入到demo目录中"></a>进入到demo目录中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> demo</div><div class="line">git <span class="built_in">log</span></div></pre></td></tr></table></figure>
<p><img src="http://i1.bvimg.com/607087/97d5d20fafe2ad0c.png" alt="Git"></p>
<p>这时我们可以认为这个这个blog其实就是一个“共享的”仓库了，但是要想创建一个真正的共享仓库，需要做一些特殊的处理。</p>
<h3 id="创建共享仓库"><a href="#创建共享仓库" class="headerlink" title="创建共享仓库"></a>创建共享仓库</h3><ul>
<li>Git要求共享仓库是一个以.git结尾的目录。</li>
<li>mkdir repo.git 创建以.git结尾目录</li>
<li>cd repo.git 进入这个目录</li>
<li>git init –bare 初始化一个共享仓库，<strong>注意选项–bare</strong></li>
<li>这样我们就建好了一个共享的仓库，但这时这个仓库是一个空的仓库。</li>
<li>以上是我们直接创建裸仓库的步骤，除了上面的方法外，我们还可以通过git clone –bare 仓库地址的形式，将已有一个仓库导出成裸仓库。</li>
</ul>
<p>这时我们可以认为这个这个blog其实就是一个“共享的”仓库了，但是要想创建一个真正的共享仓库，需要做一些特殊的处理。</p>
<h3 id="向共享仓库共享内容"><a href="#向共享仓库共享内容" class="headerlink" title="向共享仓库共享内容"></a>向共享仓库共享内容</h3><p>进入到本地的仓库 copy<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> copy</div><div class="line">git push ../repo.git master</div></pre></td></tr></table></figure></p>
<p><img src="http://i1.bvimg.com/607087/8deb3c7dc64761c8.png" alt="Git"></p>
<h3 id="从共享仓库里取出内容"><a href="#从共享仓库里取出内容" class="headerlink" title="从共享仓库里取出内容"></a>从共享仓库里取出内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> ./repo.git demo</div></pre></td></tr></table></figure>
<p><img src="http://i1.bvimg.com/607087/9f8eb78410e521f7.png" alt="Git"></p>
<p>通过repo.git共享仓库，我们轻松得到了一个copy的副本</p>
<h3 id="通过demo仓库向repo-git共享内容"><a href="#通过demo仓库向repo-git共享内容" class="headerlink" title="通过demo仓库向repo.git共享内容"></a>通过demo仓库向repo.git共享内容</h3><p>进入到demo里，我们做一些修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> demo</div><div class="line">git push ../repo.git master</div></pre></td></tr></table></figure></p>
<p><img src="http://i1.bvimg.com/607087/8ba3e40924f4533f.png" alt="Git"></p>
<h3 id="在copy仓库从repo-git获取共享的内容"><a href="#在copy仓库从repo-git获取共享的内容" class="headerlink" title="在copy仓库从repo.git获取共享的内容"></a>在copy仓库从repo.git获取共享的内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> copy</div><div class="line">git pull ../repo.git master</div></pre></td></tr></table></figure>
<p><img src="http://i1.bvimg.com/607087/d24aac855f02d573.png" alt="Git"></p>
<p>奇迹似乎发生了，我们轻松的将demo仓库里的内容，通过repo.git共享给了copy仓库。<br>惊喜不断，问题也总是不断，我们发现我们这个共享的仓库只是放到了本地的，其它人是没有办法从我们这个共享仓库共享内容的！！！<br>然而现实是，办法总是有的！！！！<br>我们把这个共享的仓库放到一台远程服务器上，问题不就解决了吗？</p>
<h2 id="gitHub"><a href="#gitHub" class="headerlink" title="gitHub"></a>gitHub</h2><p>如果我们熟悉服务器的话，我们完全可以将上述的步骤在我们的远程服务器上进行操作，然后再做一些登录权限的设置，就可非常完美的搭建一个共享服务器了。其实为了更好的管理我们的仓库，一些第三方机构开发出了Web版仓库管理程序，通过Web界面形式管理仓库。gitHub关于它的名气与意义，大家可以自行查阅，我们这里介绍它的使用。</p>
<h3 id="注册账号并完善资料"><a href="#注册账号并完善资料" class="headerlink" title="注册账号并完善资料"></a>注册账号并完善资料</h3><p>自行注册略过…</p>
<h3 id="创建共享仓库-1"><a href="#创建共享仓库-1" class="headerlink" title="创建共享仓库"></a>创建共享仓库</h3><p><img src="http://i1.bvimg.com/607087/df8770491666909f.png" alt="Git"></p>
<h3 id="填写仓库资料"><a href="#填写仓库资料" class="headerlink" title="填写仓库资料"></a>填写仓库资料</h3><p><img src="http://i1.bvimg.com/607087/727d75837cbdbc58.png" alt="Git"></p>
<h3 id="共享仓库"><a href="#共享仓库" class="headerlink" title="共享仓库"></a>共享仓库</h3><p><img src="http://i1.bvimg.com/607087/facbae78ff45a0ff.png" alt="Git"></p>
<ul>
<li>远程地址特别长，我们可以给他起一个别名</li>
<li>git remote add origin git@github.com:Botue/repo.git,这样origin 就代表 git@github.com:Botue/repo.git</li>
<li>当我们通过git clone 从共享仓库获内容时，会自动帮我们添加origin到对应的仓库地址，例如：git clone git@github.com:Botue/repo.git 会自动添加origin 对应 git@github.com:Botue/repo.git</li>
</ul>
<h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p><img src="http://i1.bvimg.com/607087/59962c5f21788036.png" alt="Git"></p>
<p>将id_rsa.pub公钥的内容复制<br>打开gitHub的个人中心</p>
<p><img src="http://i1.bvimg.com/607087/72c234e3c3544569.png" alt="Git"></p>
<p>打到SSH keys</p>
<p><img src="http://i1.bvimg.com/607087/762a492ad0680937.png" alt="Git"></p>
<ul>
<li>到此我们便可以通过gitHub 提供的Web界面来管理我们的仓库了。</li>
<li>我们发现通过gitHub管理仓库实在是太方便了，可是只能免费使用公开仓库，自已公司的代码当然不能公开了，可是私有仓库又是需要交“保护费”的，无耐国人还是比较喜欢免费的，网络界总是有很多雷峰的，比如gitLab!!!</li>
<li>gitLab也是一个可以通过Web界面管理仓库的网站程序，我们可以把它架设到公司自已的服务器上，实现仓库私有化，这也是大部分公司通常采用的方法，其使用方法与gitHub十分相似。</li>
<li>省略很多内容…..</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过上面学习我们可以很好的管理本地版本控制了，可是如果我们下班回到家里突然来了灵感觉得有部分代码可以优化，如果能接着公司电脑上的代码继续写该有多好呀！另一种情形，假设项目比较大，不同的功能模块由不同的开发人员完成，不同模块儿之间又难免会依赖关系，这时如果我们的代码互相合并（融合）该有多好呀！所有模块开发完毕后，需要整合到一起，要能做到准确无误该有多好呀！借助一个远程仓库，大家可以共享代码、历史版本等数据，便可以解决以上遇到的所有问题，在学习远程仓库前我们先来学习git clone path这个命令。&lt;br&gt;
    
    </summary>
    
      <category term="辅助工具" scheme="http://yoursite.com/categories/%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>git基础学习与使用(2)</title>
    <link href="http://yoursite.com/2016/07/01/git%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8(2)/"/>
    <id>http://yoursite.com/2016/07/01/git基础学习与使用(2)/</id>
    <published>2016-07-01T07:54:06.000Z</published>
    <updated>2017-08-18T12:11:55.313Z</updated>
    
    <content type="html"><![CDATA[<p>在我们的现实开发中，需求往往是五花八门的，同时开发个需求的情况十分常见，比如当你正在专注开发一个功能时，突然有一个紧急的BUG需要你来修复，这个时候我们当然是希望在能够保存当前任务进度，再去修改这个BUG，等这个BUG修复完成后再继续我们的任务。如何实现呢？可以通过创建分支来解决实际开发中类似的问题。<br> <a id="more"></a></p>
<h2 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h2><p>如下图所示：</p>
<p><img src="http://i2.bvimg.com/607087/03b002530e9db88a.png" alt="Git"></p>
<p>当我们在初始化仓库的时候，Git会默认帮我们创建了一个master的分支，并且HEAD默认指向了master末端。</p>
<p><strong>我们也可以创建自已的分支。</strong></p>
<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch hotfix</div></pre></td></tr></table></figure>
<p><img src="http://i2.bvimg.com/607087/b35fa19aca9ed91f.png" alt="Git"></p>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout hotfix</div></pre></td></tr></table></figure>
<p><img src="http://i2.bvimg.com/607087/e692c31b2fab53fb.png" alt="Git"></p>
<p>我们发现HEAD现在又指向了hotfix的末端</p>
<h3 id="再次提交操作"><a href="#再次提交操作" class="headerlink" title="再次提交操作"></a>再次提交操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git add -A</div><div class="line">git commit -m <span class="string">'add some code for hotfix'</span></div></pre></td></tr></table></figure>
<p><img src="http://i2.bvimg.com/607087/740fe8a9a2c7c1cd.png" alt="Git"></p>
<p>这次的提交历史版本就会记录在hotfix这个分支上了，并且HEAD伴随developer在移动。</p>
<h3 id="当我们再次切回到master时"><a href="#当我们再次切回到master时" class="headerlink" title="当我们再次切回到master时"></a>当我们再次切回到master时</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout master</div></pre></td></tr></table></figure>
<p><img src="http://i2.bvimg.com/607087/0a68d4d3f4ce7e04.png" alt="Git"></p>
<p>当我们切换回master后，HEAD指向了master分支的末端。</p>
<h3 id="继续之前的开发"><a href="#继续之前的开发" class="headerlink" title="继续之前的开发"></a>继续之前的开发</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git add -A</div><div class="line">git commit -m <span class="string">'add some code for master'</span></div></pre></td></tr></table></figure>
<p><img src="http://i2.bvimg.com/607087/837b8915f86d9356.png" alt="Git"></p>
<p>总结：</p>
<ul>
<li>当我们git checkout branchname时，HEAD会自动指向对应分支的末端，工作目录中的源码也会 随之发生改变。</li>
<li>这个时候我们就在hotfix这个分支上修复了这个BUG，而我们原来在master分支上的操作并未受到影响。</li>
</ul>
<p>思考一个问题：</p>
<ul>
<li>现在master这个分支上是否包含了hotfix的修复呢？</li>
<li>实际上从上图可以看出这时的master分支并没有包含有hotfix的修复。</li>
</ul>
<h3 id="合并（融合）分支"><a href="#合并（融合）分支" class="headerlink" title="合并（融合）分支"></a>合并（融合）分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout master</div><div class="line">git merge hotfix</div></pre></td></tr></table></figure>
<p><img src="http://i2.bvimg.com/607087/357d07a6d11372e9.png" alt="Git"></p>
<p>这时master会有两个父结点了，master便包含了hotfix里的修复了</p>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>这时用来修复BUG创建的hotfix分支已经没有用处了，我们可以将它删除。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -d hotfix</div></pre></td></tr></table></figure></p>
<p><img src="http://i2.bvimg.com/607087/0a94310455df737c.png" alt="Git"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我们的现实开发中，需求往往是五花八门的，同时开发个需求的情况十分常见，比如当你正在专注开发一个功能时，突然有一个紧急的BUG需要你来修复，这个时候我们当然是希望在能够保存当前任务进度，再去修改这个BUG，等这个BUG修复完成后再继续我们的任务。如何实现呢？可以通过创建分支来解决实际开发中类似的问题。&lt;br&gt;
    
    </summary>
    
      <category term="辅助工具" scheme="http://yoursite.com/categories/%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git基础学习与使用(1)</title>
    <link href="http://yoursite.com/2016/06/21/git%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8(1)/"/>
    <id>http://yoursite.com/2016/06/21/git基础学习与使用(1)/</id>
    <published>2016-06-21T07:54:06.000Z</published>
    <updated>2017-08-18T10:21:26.714Z</updated>
    
    <content type="html"><![CDATA[<p> 在一个项目中，凡是由开发人员编写的都算是源代码，而人为维护源代码则是一件非常让人头疼的事。因此，人们开发了很多代码管理工具，让源代码可以被追溯，记录每次变更了什么，谁主导这次变化等，git就是其中的一款工具。<br> <a id="more"></a></p>
<h2 id="Git工作原理"><a href="#Git工作原理" class="headerlink" title="Git工作原理"></a>Git工作原理</h2><p>为了更好的学习Git，我们们必须了解Git管理我们文件的3种状态，分别是已提交（committed）、已修改（modified）和已暂存（staged），由此引入 Git 项目的三个工作区域的概念：Git 仓库、工作目录以及暂存区域。</p>
<ul>
<li>【Git仓库】目录是Git用来保存项目的元数据和对象数据库的地方这是。Git中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。</li>
<li>【工作目录】是对项目的某个版本独立提取出来的内容。 这些从Git仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</li>
<li>【暂存区域】是一个文件，保存了下次将提交的文件列表信息，一般在Git仓库目录中。有时候也被称作“索引”（Index），不过一般说法还是叫暂存区域。</li>
</ul>
<p><img src="http://i2.bvimg.com/607087/33d125f00ff3f554.png" alt="Git三个工作区域"></p>
<p>基本的Git工作流程如下:</p>
<ol>
<li>在工作目录中修改文件。</li>
<li>暂存文件，将文件的快照放入暂存区域。</li>
<li>提交更新，找到暂存区域的文件，将快照永久性存储到Git仓库目录。</li>
</ol>
<h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><h3 id="Window安装"><a href="#Window安装" class="headerlink" title="Window安装"></a>Window安装</h3><ul>
<li><a href="http://git-scm.com/download/win" target="_blank" rel="external">点此</a>下载Git客户端软件，和普通软件安装方式一样。</li>
</ul>
<h3 id="Linu安装"><a href="#Linu安装" class="headerlink" title="Linu安装"></a>Linu安装</h3><ul>
<li>CentOS发行版：sudo yum install git</li>
<li>Ubuntu发行版：sudo apt-get install git</li>
</ul>
<h3 id="Mac安装"><a href="#Mac安装" class="headerlink" title="Mac安装"></a>Mac安装</h3><ul>
<li>打开Terminal直接输入git命令，会自动提示，按提示引导安装即可。</li>
</ul>
<h2 id="Git本地仓库"><a href="#Git本地仓库" class="headerlink" title="Git本地仓库"></a>Git本地仓库</h2><h3 id="Git基础"><a href="#Git基础" class="headerlink" title="Git基础"></a>Git基础</h3><p>命令行方式：任意目录（建议开发目录）右键 &gt; Git Bash Here</p>
<h4 id="配置用户"><a href="#配置用户" class="headerlink" title="配置用户"></a>配置用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name <span class="string">"自已的名字"</span></div><div class="line">git config --global user.email <span class="string">"自已的邮箱地址"</span></div></pre></td></tr></table></figure>
<p>其中–global指配置当前用户所有仓库，–system指配置当前计算机上所有用户的所有仓库。</p>
<h4 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
<p>git init只是创建了一个名为.git的隐藏目录，这个目录就是存储我们历史版本的仓库，ls -al 可以查看。假如公司已有项目用了Git，那我们就利用克隆。</p>
<h4 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h4><p>git status可以检测当前仓库文件的状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status</div></pre></td></tr></table></figure></p>
<p><img src="http://i2.bvimg.com/607087/82aea2a9bbb77915.png" alt="git status"></p>
<h4 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a>添加文件到暂存区</h4><p>git add file “*”或-A代表所有<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add *</div></pre></td></tr></table></figure></p>
<p><img src="http://i2.bvimg.com/607087/1685bb2715d56d64.png" alt="git add"></p>
<p>放到暂存区的文件被标记成了绿色，等待提交。</p>
<h4 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h4><p>git commit -m ‘备注信息’<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">'xxxx'</span></div></pre></td></tr></table></figure></p>
<p><img src="http://i2.bvimg.com/607087/e288df95c2734755.png" alt="git commit"></p>
<p>将暂存区被标记成绿色的文件，全部提交到仓库存储。</p>
<h4 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span></div></pre></td></tr></table></figure>
<p><img src="http://i2.bvimg.com/607087/f68393c2d5e65ad9.png" alt="git log"></p>
<p>我们可以查看到一次提交记录，97b101e7d代表这次提交的唯一ID，一般称为SHA值。</p>
<p><strong>这时我们对index.html文件做修改</strong></p>
<h4 id="再次检测仓库文件状态"><a href="#再次检测仓库文件状态" class="headerlink" title="再次检测仓库文件状态"></a>再次检测仓库文件状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status</div></pre></td></tr></table></figure>
<p><img src="http://i2.bvimg.com/607087/65c3dce98a9e6096.png" alt="git status"></p>
<p>被修改过的文件被标记成了红色，等待重新添加到暂存区。</p>
<h4 id="重新添加暂存区然后提交"><a href="#重新添加暂存区然后提交" class="headerlink" title="重新添加暂存区然后提交"></a>重新添加暂存区然后提交</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git add index.html</div><div class="line">git commit -m <span class="string">'add some words'</span></div></pre></td></tr></table></figure>
<p><img src="http://i2.bvimg.com/607087/c104c9db967cdea3.png" alt="git again"></p>
<h4 id="再次查看历史"><a href="#再次查看历史" class="headerlink" title="再次查看历史"></a>再次查看历史</h4><p>git log 可查到所有提交历史<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">log</span></div></pre></td></tr></table></figure></p>
<p><img src="http://i2.bvimg.com/607087/0aaf2b45a5de45f8.png" alt="git log"></p>
<p>这时可以查看到两次提交历史。这时关掉所有目录甚至关机！</p>
<h4 id="恢复上一次提交的状态"><a href="#恢复上一次提交的状态" class="headerlink" title="恢复上一次提交的状态"></a>恢复上一次提交的状态</h4><p>git reset –hard 97b101e7d,查看index.html发现回到了没有修改的状态。<br>git log再次查看发现提交历史只有一个了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git reset --hard 97b101e7d</div><div class="line">...</div><div class="line">git <span class="built_in">log</span></div></pre></td></tr></table></figure></p>
<p><img src="http://i2.bvimg.com/607087/6cc56524f66a95e1.png" alt="git reset"></p>
<p>这时我们非常容易就回到了曾经的一个历史版本。</p>
<h3 id="仓库示意图"><a href="#仓库示意图" class="headerlink" title="仓库示意图"></a>仓库示意图</h3><p><img src="http://i2.bvimg.com/607087/c1a6477178059523.png" alt="git"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 在一个项目中，凡是由开发人员编写的都算是源代码，而人为维护源代码则是一件非常让人头疼的事。因此，人们开发了很多代码管理工具，让源代码可以被追溯，记录每次变更了什么，谁主导这次变化等，git就是其中的一款工具。&lt;br&gt;
    
    </summary>
    
      <category term="辅助工具" scheme="http://yoursite.com/categories/%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>gulp学习笔记</title>
    <link href="http://yoursite.com/2016/06/16/gulp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/06/16/gulp学习笔记/</id>
    <published>2016-06-16T04:45:44.000Z</published>
    <updated>2017-08-18T07:52:40.639Z</updated>
    
    <content type="html"><![CDATA[<p>Gulp.js是一个前端构建工具,与gruntjs相比,gulpjs无需写一大堆繁杂的配置参数,API也非常简单,学习成本低。<br><a id="more"></a></p>
<h2 id="Gulp简介"><a href="#Gulp简介" class="headerlink" title="Gulp简介"></a>Gulp简介</h2><ul>
<li>链接：<ul>
<li><a href="http://gulpjs.com/" target="_blank" rel="external">官网</a></li>
<li><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">中文网</a></li>
</ul>
</li>
<li>Gulp.js 是一个自动化构建工具,开发者可以使用它在项目开发过程中自动执行常见任务。Gulp.js 是基于 Node.js 构建的,利用 Node.js 流的威力,你可以快速构建项目并减少频繁的 IO 操作。Gulp.js 源文件和你用来定义任务的 Gulp 文件都是通过 JavaScript（或者 CoffeeScript ）源码来实现的。</li>
<li>Gulp.js 是用来机械化的完成重复性质的工作，其机制就是将重复工作抽象成一个个的任务。</li>
</ul>
<h2 id="Gulp准备工作"><a href="#Gulp准备工作" class="headerlink" title="Gulp准备工作"></a>Gulp准备工作</h2><ul>
<li>安装Node.js</li>
<li>安装 gulp 命令行工具<ul>
<li><code>npm install -g gulp</code></li>
</ul>
</li>
<li>初始化 gulp 项目</li>
<li>创建任务 - gulpfile.js</li>
</ul>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="安装所需插件"><a href="#安装所需插件" class="headerlink" title="安装所需插件"></a>安装所需插件</h3><ul>
<li>安装所需插件，如LESS编译、压缩需要gulp-less、gulp-cssnano等,包括浏览器同步插件browser-sync。</li>
<li><p>在gulpfile.js中使用时要先引入。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install gulp-less gulp-cssnano --save-dev</div></pre></td></tr></table></figure>
</li>
<li><p>在gulpfile中先载入gulp包，因为这个包提供了一些API</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">var gulp = require(&apos;gulp&apos;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="LESS编译、压缩、合并"><a href="#LESS编译、压缩、合并" class="headerlink" title="LESS编译、压缩、合并"></a>LESS编译、压缩、合并</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var less = require(&apos;gulp-less&apos;);</div><div class="line">var cssnano = require(&apos;gulp-cssnano&apos;);</div><div class="line"></div><div class="line">// 1. LESS编译 压缩 --合并没有必要，一般预处理CSS都可以导包</div><div class="line">gulp.task(&apos;style&apos;, function() &#123;</div><div class="line">  // 这里是在执行style任务时自动执行的</div><div class="line">  gulp.src([&apos;src/styles/*.less&apos;, &apos;!src/styles/_*.less&apos;])</div><div class="line">    .pipe(less())</div><div class="line">    .pipe(cssnano())</div><div class="line">    .pipe(gulp.dest(&apos;dist/styles&apos;))</div><div class="line">    .pipe(browserSync.reload(&#123;</div><div class="line">      stream: true</div><div class="line">    &#125;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="JS合并、压缩、混淆"><a href="#JS合并、压缩、混淆" class="headerlink" title="JS合并、压缩、混淆"></a>JS合并、压缩、混淆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var concat = require(&apos;gulp-concat&apos;);</div><div class="line">var uglify = require(&apos;gulp-uglify&apos;);</div><div class="line"></div><div class="line">// 2. JS合并 压缩混淆</div><div class="line">gulp.task(&apos;script&apos;, function() &#123;</div><div class="line">  gulp.src(&apos;src/scripts/*.js&apos;)</div><div class="line">    .pipe(concat(&apos;all.js&apos;))</div><div class="line">    .pipe(uglify())</div><div class="line">    .pipe(gulp.dest(&apos;dist/scripts&apos;))</div><div class="line">    .pipe(browserSync.reload(&#123;</div><div class="line">      stream: true</div><div class="line">    &#125;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="img复制"><a href="#img复制" class="headerlink" title="img复制"></a>img复制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 3. 图片复制</div><div class="line">gulp.task(&apos;image&apos;, function() &#123;</div><div class="line">  gulp.src(&apos;src/images/*.*&apos;)</div><div class="line">    .pipe(gulp.dest(&apos;dist/images&apos;))</div><div class="line">    .pipe(browserSync.reload(&#123;</div><div class="line">      stream: true</div><div class="line">    &#125;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="html压缩"><a href="#html压缩" class="headerlink" title="html压缩"></a>html压缩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var htmlmin = require(&apos;gulp-htmlmin&apos;);</div><div class="line"></div><div class="line">// 4. HTML</div><div class="line">gulp.task(&apos;html&apos;, function() &#123;</div><div class="line">  gulp.src(&apos;src/*.html&apos;)</div><div class="line">    .pipe(htmlmin(&#123;</div><div class="line">      collapseWhitespace: true,</div><div class="line">      removeComments: true</div><div class="line">    &#125;))</div><div class="line">    .pipe(gulp.dest(&apos;dist&apos;))</div><div class="line">    .pipe(browserSync.reload(&#123;</div><div class="line">      stream: true</div><div class="line">    &#125;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="定义任务、开启同步更新"><a href="#定义任务、开启同步更新" class="headerlink" title="定义任务、开启同步更新"></a>定义任务、开启同步更新</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var browserSync = require(&apos;browser-sync&apos;);</div><div class="line">gulp.task(&apos;serve&apos;, function() &#123;</div><div class="line">  browserSync(&#123;</div><div class="line">    server: &#123;</div><div class="line">      baseDir: [&apos;dist&apos;]</div><div class="line">    &#125;,</div><div class="line">  &#125;, function(err, bs) &#123;</div><div class="line">    console.log(bs.options.getIn([&quot;urls&quot;, &quot;local&quot;]));</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  gulp.watch(&apos;src/styles/*.less&apos;,[&apos;style&apos;]);</div><div class="line">  gulp.watch(&apos;src/scripts/*.js&apos;,[&apos;script&apos;]);</div><div class="line">  gulp.watch(&apos;src/images/*.*&apos;,[&apos;image&apos;]);</div><div class="line">  gulp.watch(&apos;src/*.html&apos;,[&apos;html&apos;]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><ul>
<li><a href="https://www.npmjs.com/package/gulp-less" target="_blank" rel="external">编译 Less：gulp-less</a></li>
<li><a href="https://www.npmjs.com/package/gulp-connect" target="_blank" rel="external">创建本地服务器：gulp-connect</a></li>
<li><a href="https://www.npmjs.com/package/gulp-concat" target="_blank" rel="external">合并文件：gulp-concat</a></li>
<li><a href="https://www.npmjs.com/package/gulp-uglify" target="_blank" rel="external">最小化 js 文件：gulp-uglify</a></li>
<li><a href="https://www.npmjs.com/package/gulp-rename" target="_blank" rel="external">重命名文件：gulp-rename</a></li>
<li><a href="https://www.npmjs.com/package/gulp-minify-css" target="_blank" rel="external">最小化 css 文件：gulp-minify-css</a></li>
<li><a href="https://www.npmjs.com/package/gulp-minify-html" target="_blank" rel="external">压缩html文件 gulp-minify-html</a></li>
<li><a href="https://www.npmjs.com/package/gulp-imagemin" target="_blank" rel="external">最小化图像：gulp-imagemin</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gulp.js是一个前端构建工具,与gruntjs相比,gulpjs无需写一大堆繁杂的配置参数,API也非常简单,学习成本低。&lt;br&gt;
    
    </summary>
    
      <category term="构建工具" scheme="http://yoursite.com/categories/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>node基础与环境搭建</title>
    <link href="http://yoursite.com/2016/06/12/node%E5%9F%BA%E7%A1%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2016/06/12/node基础与环境搭建/</id>
    <published>2016-06-12T04:58:32.000Z</published>
    <updated>2017-08-18T06:03:11.213Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型,使其轻量又高效。在此将学习使用node过程及自己的一些理解做些记录。<br><a id="more"></a></p>
<h3 id="Node基础概念"><a href="#Node基础概念" class="headerlink" title="Node基础概念"></a>Node基础概念</h3><ul>
<li>Node.js 不是JS文件，也不是一个JS框架</li>
<li>Node.js 是Server side Javascript runtime，服务端的一个JS运行时、运行环境</li>
<li>我们可以在NODE运行JS代码，但只能运行ECMAScript，无法使用 BOM 和 DOM</li>
<li>目前我们的JS是运行在浏览器内核中，但Node.js可以使JS在服务端运行</li>
<li>目前有两个分支<ul>
<li>Node.js 0.12.7 官方版本 要求尽善尽美</li>
<li>IO.js 是社区的产物，非官方产物，其有很多新特性，迭代快，社区推进快</li>
<li>15年两者合并，发布node第一个正式版 4.0， 迭代速度又慢了</li>
<li>node 5.x == io.js</li>
<li>node 4.0 == node</li>
</ul>
</li>
<li>Node.js是一个轻内核（本身没有什么功能）的东东，所有的功能都要功能包提供</li>
<li>node官方提供了一些最基础的包</li>
</ul>
<h3 id="Node安装"><a href="#Node安装" class="headerlink" title="Node安装"></a>Node安装</h3><h4 id="Mac版"><a href="#Mac版" class="headerlink" title="Mac版"></a>Mac版</h4><ol>
<li>安装包的方式<ul>
<li><a href="https://nodejs.org/dist/v5.5.0/node-v5.5.0.pkg" target="_blank" rel="external">pkg</a></li>
</ul>
</li>
<li><p>NVM（Node Version Manager）方式</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash</div><div class="line">$ <span class="built_in">echo</span> <span class="string">'. ~/.nvm/nvm.sh'</span> &gt;&gt; .bash_profile</div><div class="line">$ nvm install stable</div><div class="line">$ nvm <span class="built_in">alias</span> default stable</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Windows版"><a href="#Windows版" class="headerlink" title="Windows版"></a>Windows版</h4><ol>
<li>安装包的方式<ul>
<li><a href="https://nodejs.org/dist/v5.5.0/node-v5.5.0-x64.msi" target="_blank" rel="external">msi_x64</a></li>
<li><a href="https://nodejs.org/dist/v5.5.0/node-v5.5.0-x86.msi" target="_blank" rel="external">msi_x86</a></li>
</ul>
</li>
<li>NVM（Node Version Manager）方式</li>
</ol>
<ul>
<li>因为NODE版本比较多，开发人员可能依赖很多版本，通过NVM，可以轻松切换于不同的版本之间</li>
<li><p>例如通过以下命令可以切换当前Node版本为4.5.0</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nvm use v4.5.0</div></pre></td></tr></table></figure>
</li>
<li><p>其它命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ nvm use [对应的版本号] [平台架构（如果是32系统需要写32,64位不用管）]</div><div class="line">$ nvm install &lt;version&gt; [arch]  安装</div><div class="line">$ nvm uninstall &lt;version&gt; 卸载</div><div class="line">$ nvm list 查看已经安装版本</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h4><ul>
<li>node package manager(node的包管理工具)</li>
<li>npm管理包非常方便，我们只需要记住使用哪个包就可以了,安装node时会自动安装npm</li>
<li>使用<ul>
<li>npm install xxx </li>
<li>安装一个包到项目本地，必须要联网</li>
<li>安装完成过后项目根目录下会多一个node_modules文件夹，所有的下载下来的包全部在里面</li>
<li>由于需要记录项目依赖哪些东西，所以需要一个配置文件“package.json”，可以通过npm init命令生成</li>
<li>以后安装包的时候将其–save</li>
<li>–save就是将我们安装的包名字和包版本记录到配置文件中的dependencies节点中</li>
<li>–save-dev</li>
<li>项目依赖分两种，一个就是普通的项目依赖比如bootstrap，还用一种只是开发阶段需要用的，这种属于开发依赖比如gulp，开发依赖最终记录在devDependencies节点里面</li>
<li>npm uninstall xxx –save</li>
<li>npm install xxx -g(全局安装包)<ul>
<li>如果你安装的是一个工具，工具要在每一个地方都能用，这种情况下一般全局安装。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Bower"><a href="#Bower" class="headerlink" title="Bower"></a>Bower</h4><ul>
<li>Web sites are made of lots of things ― frameworks, libraries, assets, and utilities. Bower manages all these things for you.</li>
<li>Bower就是用来管理项目中所有的依赖，主要用于Web页面开发时使用的包管理，比如jquery，bootstrap<blockquote>
<p>重复的轮子太多，抓住轮子与轮子之间的共性</p>
</blockquote>
</li>
</ul>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><ul>
<li><p>环境变量就是操作系统提供的系统级别用于存储变量的地方，分为系统变量和用户变量</p>
<ul>
<li>系统变量指的是所用当前系统用户共享的变量</li>
<li>用户变量值当前的系统用户独享的变量</li>
<li>建议将自己配置的环境变量放在用户变量中<blockquote>
<p>注：环境变量的变量名是不区分大小写的，变量间运行可以相互引用</p>
</blockquote>
</li>
</ul>
</li>
<li><p>特殊值PATH：</p>
</li>
<li>PATH变量（不区分大小写），相当于一个路径的引用</li>
<li>只要添加到PATH变量中的路径，都可以在任何目录下搜索</li>
</ul>
<h4 id="Node相关环境变量配置"><a href="#Node相关环境变量配置" class="headerlink" title="Node相关环境变量配置"></a>Node相关环境变量配置</h4><p>假设nvm安装目录为C:\Develop\，nodejs安装目录为C:\Develop\，npm安装目录为C:\Develop\nvm\，需要配置的环境变量如下：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">NVM_HOME=C:\Develop\nvm</div><div class="line"></div><div class="line">NVM_SYMLINK=C:\Develop\nodejs</div><div class="line"></div><div class="line">NPM_HOME=C:\Develop\nvm\npm</div><div class="line"></div><div class="line">PATH=%NVM_HOME%;%NVM_SYMLINK%;%NPM_HOME%</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型,使其轻量又高效。在此将学习使用node过程及自己的一些理解做些记录。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
      <category term="nvm" scheme="http://yoursite.com/tags/nvm/"/>
    
      <category term="环境变量" scheme="http://yoursite.com/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
</feed>
