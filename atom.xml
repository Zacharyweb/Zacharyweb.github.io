<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zachary&#39;Blog</title>
  <subtitle>做个有趣的人。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-17T05:20:34.684Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>朱两边</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ios和android 浏览器适配问题记录</title>
    <link href="http://yoursite.com/2017/08/11/ios%E5%92%8Candroid%20%E6%B5%8F%E8%A7%88%E5%99%A8%E9%80%82%E9%85%8D%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/08/11/ios和android 浏览器适配问题记录/</id>
    <published>2017-08-11T01:39:08.000Z</published>
    <updated>2017-08-17T05:20:34.684Z</updated>
    
    <content type="html"><![CDATA[<p>参与手机端页面开发也有一段时间了，在此记录一些工作中遇到的ios和android 浏览器适配问题以及相应的解决方案，会持续更新。<br><a id="more"></a></p>
<h3 id="IOS移动端click事件300ms的延迟响应"><a href="#IOS移动端click事件300ms的延迟响应" class="headerlink" title="IOS移动端click事件300ms的延迟响应"></a>IOS移动端click事件300ms的延迟响应</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">移动设备上的web网页是有300ms延迟的，玩玩会造成按钮点击延迟甚至是点击失效。这是由于区分单击事件和双击屏幕缩放的历史原因造成的,</div><div class="line">2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，你就能看清该部分放大后的内容，再次双击后能回到原始状态。</div><div class="line">双击缩放是指用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。</div><div class="line">原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;，此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为300毫秒。这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。</div><div class="line">解决方案：</div><div class="line">fastclick可以解决在手机上点击事件的300ms延迟</div><div class="line">zepto的touch模块，tap事件也是为了解决在click的延迟问题</div><div class="line">触摸事件的响应顺序为 touchstart --&gt; touchmove --&gt; touchend --&gt; click,也可以通过绑定ontouchstart事件，加快对事件的响应，解决300ms延迟问题</div></pre></td></tr></table></figure>
<h3 id="一些情况下对非可点击元素如-label-span-监听click事件，ios下不会触发"><a href="#一些情况下对非可点击元素如-label-span-监听click事件，ios下不会触发" class="headerlink" title="一些情况下对非可点击元素如(label,span)监听click事件，ios下不会触发"></a>一些情况下对非可点击元素如(label,span)监听click事件，ios下不会触发</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">解决方案：css增加cursor:pointer;</div></pre></td></tr></table></figure>
<h3 id="IOS移动端click事件300ms的延迟响应-1"><a href="#IOS移动端click事件300ms的延迟响应-1" class="headerlink" title="IOS移动端click事件300ms的延迟响应"></a>IOS移动端click事件300ms的延迟响应</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;h1 id=&quot;name&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<h3 id="三星手机遮罩层下的input、select、a等元素可以被点击和focus-点击穿透"><a href="#三星手机遮罩层下的input、select、a等元素可以被点击和focus-点击穿透" class="headerlink" title="三星手机遮罩层下的input、select、a等元素可以被点击和focus(点击穿透)"></a>三星手机遮罩层下的input、select、a等元素可以被点击和focus(点击穿透)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">问题发现于三星手机，这个在特定需求下才会有，因此如果没有类似问题的可以不看。首先需求是浮层操作，在三星上被遮罩的元素依然可以获取focus、click、change)，有两种解决方案：</div><div class="line">1.是通过层显示以后加入对应的class名控制，截断显示层下方可获取焦点元素的事件获取</div><div class="line">2.是通过将可获取焦点元素加入的disabled属性，也可以利用属性加dom锁定的方式（disabled的一种变换方式）</div></pre></td></tr></table></figure>
<h3 id="h5页面当输入框在最底部，点击软键盘后输入框会被遮挡。"><a href="#h5页面当输入框在最底部，点击软键盘后输入框会被遮挡。" class="headerlink" title="h5页面当输入框在最底部，点击软键盘后输入框会被遮挡。"></a>h5页面当输入框在最底部，点击软键盘后输入框会被遮挡。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//可采用如下方式解决</div><div class="line">var oHeight = $(document).height(); //浏览器当前的高度</div><div class="line">$(window).resize(function()&#123; </div><div class="line">    if($(document).height() &lt; oHeight)&#123; </div><div class="line">          $(&quot;#footer&quot;).css(&quot;position&quot;,&quot;static&quot;); </div><div class="line">    &#125;else&#123; </div><div class="line">          $(&quot;#footer&quot;).css(&quot;position&quot;,&quot;absolute&quot;);</div><div class="line">    &#125; </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="不让-Android-手机识别邮箱"><a href="#不让-Android-手机识别邮箱" class="headerlink" title="不让 Android 手机识别邮箱"></a>不让 Android 手机识别邮箱</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta content=&quot;email=no&quot; name=&quot;format-detection&quot; /&gt;</div></pre></td></tr></table></figure>
<h3 id="禁止-iOS-识别长串数字为电话"><a href="#禁止-iOS-识别长串数字为电话" class="headerlink" title="禁止 iOS 识别长串数字为电话"></a>禁止 iOS 识别长串数字为电话</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta content=&quot;telephone=no&quot; name=&quot;format-detection&quot; /&gt;</div></pre></td></tr></table></figure>
<h3 id="禁止-iOS-弹出各种操作窗口"><a href="#禁止-iOS-弹出各种操作窗口" class="headerlink" title="禁止 iOS 弹出各种操作窗口"></a>禁止 iOS 弹出各种操作窗口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-touch-callout:none</div></pre></td></tr></table></figure>
<h3 id="禁止ios和android用户选中文字"><a href="#禁止ios和android用户选中文字" class="headerlink" title="禁止ios和android用户选中文字"></a>禁止ios和android用户选中文字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-user-select:none</div></pre></td></tr></table></figure>
<h3 id="ios下取消input在输入的时候英文首字母的默认大写"><a href="#ios下取消input在输入的时候英文首字母的默认大写" class="headerlink" title="ios下取消input在输入的时候英文首字母的默认大写"></a>ios下取消input在输入的时候英文首字母的默认大写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input autocapitalize=&quot;off&quot; autocorrect=&quot;off&quot; /&gt;</div></pre></td></tr></table></figure>
<h3 id="在ios和andriod中-audio元素和video元素无法自动播放"><a href="#在ios和andriod中-audio元素和video元素无法自动播放" class="headerlink" title="在ios和andriod中,audio元素和video元素无法自动播放"></a>在ios和andriod中,audio元素和video元素无法自动播放</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(&apos;html&apos;).one(&apos;touchstart&apos;,function()&#123; audio.play()&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>作者：sandisen<br>链接：<a href="http://www.jianshu.com/p/31e53df2ecce" target="_blank" rel="external">http://www.jianshu.com/p/31e53df2ecce</a><br>來源：简书</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参与手机端页面开发也有一段时间了，在此记录一些工作中遇到的ios和android 浏览器适配问题以及相应的解决方案，会持续更新。&lt;br&gt;
    
    </summary>
    
      <category term="移动端" scheme="http://yoursite.com/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="ios" scheme="http://yoursite.com/tags/ios/"/>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>仿Vue双向绑定demo</title>
    <link href="http://yoursite.com/2017/05/12/%E4%BB%BFVue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9Ademo/"/>
    <id>http://yoursite.com/2017/05/12/仿Vue双向绑定demo/</id>
    <published>2017-05-12T01:39:08.000Z</published>
    <updated>2017-08-17T02:30:17.448Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文主要尝试使用es6新特性Object.defineProperty()来实现一个简单的双向绑定案例。<br>相关代码已经放在 <a href="https://github.com/Zacharyweb" target="_blank" rel="external">Github</a>，会持续更新。</p>
</blockquote>
<a id="more"></a>
<h2 id="Vue双向绑定实现过程"><a href="#Vue双向绑定实现过程" class="headerlink" title="Vue双向绑定实现过程"></a>Vue双向绑定实现过程</h2><p>从开始接触Vue开始，我们便对它的“数据响应”赞叹不绝。我们知道，Vue的双向绑定是基于es6的Object.defineProperty()方法实现的，Vue通过Object.defineProperty()来实现对数据的劫持，并触发对视图的更新工作。展开来说，当数据改变时，Object.defineProperty()对属性设置一个set函数，当数据改变时就会触发这个函数，所以我们只要将更新方法放在里面就可以实现数据到视图的更新了。如果还不熟悉其用法，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">请点击这里阅读更多用法</a>。</p>
<h2 id="本案例实现步骤"><a href="#本案例实现步骤" class="headerlink" title="本案例实现步骤"></a>本案例实现步骤</h2><p>1.实现一个监听器Observer，用来劫持并监听所有属性，如有变动，就通知订阅者Watcher。<br>2.实现一个订阅者Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。<br>3.实现一个关联者Dep，将Observer和Watcher关联起来。<br>4.实现一个解析器Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。</p>
<h3 id="实现一个Observer"><a href="#实现一个Observer" class="headerlink" title="实现一个Observer"></a>实现一个Observer</h3><p>Observer是一个数据监听器，其实现核心方法就是前文所说的Object.defineProperty( )。如果要对所有属性都进行监听的话，那么可以通过递归方法遍历所有属性值，并对其进行Object.defineProperty( )处理。思路分析中，还需要创建一个可以容纳订阅者的消息订阅器Dep，订阅器Dep主要负责收集订阅者，然后再属性变化的时候执行对应订阅者的更新函数。所以显然订阅器需要有一个容器，这个容器就是list，将上面的Observer稍微改造下，植入消息订阅器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">function defineReactive(data, key, val) &#123;</div><div class="line">    observe(val); // 递归遍历所有子属性</div><div class="line">    var dep = new Dep(); </div><div class="line">    Object.defineProperty(data, key, &#123;</div><div class="line">        enumerable: true,</div><div class="line">        configurable: true,</div><div class="line">        get: function() &#123;</div><div class="line">            if (是否需要添加订阅者) &#123;</div><div class="line">                dep.addSub(watcher); // 在这里添加一个订阅者</div><div class="line">            &#125;</div><div class="line">            return val;</div><div class="line">        &#125;,</div><div class="line">        set: function(newVal) &#123;</div><div class="line">            if (val === newVal) &#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            val = newVal;</div><div class="line">            console.log(&apos;属性&apos; + key + &apos;已经被监听了，现在值为：“&apos; + newVal.toString() + &apos;”&apos;);</div><div class="line">            dep.notify(); // 如果数据变化，通知所有订阅者</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">function Dep () &#123;</div><div class="line">    this.subs = [];</div><div class="line">&#125;</div><div class="line">Dep.prototype = &#123;</div><div class="line">    addSub: function(sub) &#123;</div><div class="line">        this.subs.push(sub);</div><div class="line">    &#125;,</div><div class="line">    notify: function() &#123;</div><div class="line">        this.subs.forEach(function(sub) &#123;</div><div class="line">            sub.update();</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>从代码上看，我们将订阅器Dep添加一个订阅者设计在getter里面，这是为了让Watcher初始化进行触发，因此需要判断是否要添加订阅者，至于具体设计方案，下文会详细说明的。在setter函数里面，如果数据变化，就会去通知所有订阅者，订阅者们就会去执行对应的更新的函数。到此为止，一个比较完整Observer已经实现了，接下来我们开始设计Watcher。  </p>
<h3 id="实现Watcher"><a href="#实现Watcher" class="headerlink" title="实现Watcher"></a>实现Watcher</h3><p>订阅者Watcher在初始化的时候需要将自己添加进订阅器Dep中，那该如何添加呢？我们已经知道监听器Observer是在get函数执行了添加订阅者Wather的操作的，所以我们只要在订阅者Watcher初始化的时候出发对应的get函数去执行添加订阅者操作即可，那要如何触发get的函数，再简单不过了，只要获取对应的属性值就可以触发了，核心原因就是因为我们使用了Object.defineProperty( )进行数据监听。这里还有一个细节点需要处理，我们只要在订阅者Watcher初始化的时候才需要添加订阅者，所以需要做一个判断操作，因此可以在订阅器上做一下手脚：在Dep.target上缓存下订阅者，添加成功后再将其去掉就可以了。订阅者Watcher的实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">function Watcher(vm, exp, cb) &#123;</div><div class="line">    this.cb = cb;</div><div class="line">    this.vm = vm;</div><div class="line">    this.exp = exp;</div><div class="line">    this.value = this.get();  // 将自己添加到订阅器的操作</div><div class="line">&#125;</div><div class="line"> </div><div class="line">Watcher.prototype = &#123;</div><div class="line">    update: function() &#123;</div><div class="line">        this.run();</div><div class="line">    &#125;,</div><div class="line">    run: function() &#123;</div><div class="line">        var value = this.vm.data[this.exp];</div><div class="line">        var oldVal = this.value;</div><div class="line">        if (value !== oldVal) &#123;</div><div class="line">            this.value = value;</div><div class="line">            this.cb.call(this.vm, value, oldVal);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    get: function() &#123;</div><div class="line">        Dep.target = this;  // 缓存自己</div><div class="line">        var value = this.vm.data[this.exp]  // 强制执行监听器里的get函数</div><div class="line">        Dep.target = null;  // 释放自己</div><div class="line">        return value;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>这时候，我们需要对监听器Observer也做个稍微调整，主要是对应Watcher类原型上的get函数。需要调整地方在于defineReactive函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">function defineReactive(data, key, val) &#123;</div><div class="line">    observe(val); // 递归遍历所有子属性</div><div class="line">    var dep = new Dep(); </div><div class="line">    Object.defineProperty(data, key, &#123;</div><div class="line">        enumerable: true,</div><div class="line">        configurable: true,</div><div class="line">        get: function() &#123;</div><div class="line">            if (Dep.target) &#123;.  // 判断是否需要添加订阅者</div><div class="line">                dep.addSub(Dep.target); // 在这里添加一个订阅者</div><div class="line">            &#125;</div><div class="line">            return val;</div><div class="line">        &#125;,</div><div class="line">        set: function(newVal) &#123;</div><div class="line">            if (val === newVal) &#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            val = newVal;</div><div class="line">            console.log(&apos;属性&apos; + key + &apos;已经被监听了，现在值为：“&apos; + newVal.toString() + &apos;”&apos;);</div><div class="line">            dep.notify(); // 如果数据变化，通知所有订阅者</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">Dep.target = null;</div></pre></td></tr></table></figure></p>
<p>到此为止，简单版的Watcher设计完毕，这时候我们只要将Observer和Watcher关联起来，就可以实现一个简单的双向绑定数据了。因为这里没有还没有设计解析器Compile，所以对于模板数据我们都进行写死处理，假设模板上又一个节点，且id号为’name’，并且双向绑定的绑定的变量也为’name’，且是通过两个大双括号包起来（这里只是为了掩饰，暂时没什么用处），模板如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;h1 id=&quot;name&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure></p>
<p>这时候我们需要将Observer和Watcher关联起来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function DemoVue (data, el, exp) &#123;</div><div class="line">    this.data = data;</div><div class="line">    observe(data);</div><div class="line">    el.innerHTML = this.data[exp];  // 初始化模板数据的值</div><div class="line">    new Watcher(this, exp, function (value) &#123;</div><div class="line">        el.innerHTML = value;</div><div class="line">    &#125;);</div><div class="line">    return this;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在页面上new以下DemoVue类，就可以实现数据的双向绑定了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;h1 id=&quot;name&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;script src=&quot;js/observer.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;js/watcher.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;js/index.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    var ele = document.querySelector(&apos;#name&apos;);</div><div class="line">    var selfVue = new DemoVue(&#123;</div><div class="line">        name: &apos;hello world&apos;</div><div class="line">    &#125;, ele, &apos;name&apos;);</div><div class="line"> </div><div class="line">    window.setTimeout(function () &#123;</div><div class="line">        console.log(&apos;name值改变了&apos;);</div><div class="line">        selfVue.data.name = &apos;canfoo&apos;;</div><div class="line">    &#125;, 2000);</div><div class="line"> </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>这时候打开页面，可以看到页面刚开始显示了是’hello world’，过了2s后就变成’canfoo’了。到这里，总算大功告成一半了，但是还有一个细节问题，我们在赋值的时候是这样的形式 ‘  selfVue.data.name = ‘canfoo’  ‘ 而我们理想的形式是’  selfVue.name = ‘canfoo’  ‘为了实现这样的形式，我们需要在new DemoVue的时候做一个代理处理，让访问selfVue的属性代理为访问selfVue.data的属性，实现原理还是使用Object.defineProperty( )对属性值再包一层：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">function DemoVue (data, el, exp) &#123;</div><div class="line">    var self = this;</div><div class="line">    this.data = data;</div><div class="line"> </div><div class="line">    Object.keys(data).forEach(function(key) &#123;</div><div class="line">        self.proxyKeys(key);  // 绑定代理属性</div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    observe(data);</div><div class="line">    el.innerHTML = this.data[exp];  // 初始化模板数据的值</div><div class="line">    new Watcher(this, exp, function (value) &#123;</div><div class="line">        el.innerHTML = value;</div><div class="line">    &#125;);</div><div class="line">    return this;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">DemoVue.prototype = &#123;</div><div class="line">    proxyKeys: function (key) &#123;</div><div class="line">        var self = this;</div><div class="line">        Object.defineProperty(this, key, &#123;</div><div class="line">            enumerable: false,</div><div class="line">            configurable: true,</div><div class="line">            get: function proxyGetter() &#123;</div><div class="line">                return self.data[key];</div><div class="line">            &#125;,</div><div class="line">            set: function proxySetter(newVal) &#123;</div><div class="line">                self.data[key] = newVal;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="实现Compile"><a href="#实现Compile" class="headerlink" title="实现Compile"></a>实现Compile</h3><p>虽然上面已经实现了一个双向数据绑定的例子，但是整个过程都没有去解析dom节点，而是直接固定某个节点进行替换数据的，所以接下来需要实现一个解析器Compile来做解析和绑定工作。解析器Compile实现步骤：<br>1.解析模板指令，并替换模板数据，初始化视图<br>2.将模板指令对应的节点绑定对应的更新函数，初始化相应的订阅器<br>为了解析模板，首先需要获取到dom元素，然后对含有dom元素上含有指令的节点进行处理，因此这个环节需要对dom操作比较频繁，所有可以先建一个fragment片段，将需要解析的dom节点存入fragment片段里再进行处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function nodeToFragment (el) &#123;</div><div class="line">    var fragment = document.createDocumentFragment();</div><div class="line">    var child = el.firstChild;</div><div class="line">    while (child) &#123;</div><div class="line">        // 将Dom元素移入fragment中</div><div class="line">        fragment.appendChild(child);</div><div class="line">        child = el.firstChild</div><div class="line">    &#125;</div><div class="line">    return fragment;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来需要遍历各个节点，对含有相关指定的节点进行特殊处理，这里咱们先处理最简单的情况，只对带有双花括号这种形式的指令进行处理：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">function compileElement (el) &#123;</div><div class="line">    var childNodes = el.childNodes;</div><div class="line">    var self = this;</div><div class="line">    [].slice.call(childNodes).forEach(function(node) &#123;</div><div class="line">        var reg = /\&#123;\&#123;(.*)\&#125;\&#125;/;</div><div class="line">        var text = node.textContent;</div><div class="line"> </div><div class="line">        if (self.isTextNode(node) &amp;&amp; reg.test(text)) &#123;  // 判断是否是符合这种形式&#123;&#123;&#125;&#125;的指令</div><div class="line">            self.compileText(node, reg.exec(text)[1]);</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        if (node.childNodes &amp;&amp; node.childNodes.length) &#123;</div><div class="line">            self.compileElement(node);  // 继续递归遍历子节点</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;,</div><div class="line">function compileText (node, exp) &#123;</div><div class="line">    var self = this;</div><div class="line">    var initText = this.vm[exp];</div><div class="line">    this.updateText(node, initText);  // 将初始化的数据初始化到视图中</div><div class="line">    new Watcher(this.vm, exp, function (value) &#123;  // 生成订阅器并绑定更新函数</div><div class="line">        self.updateText(node, value);</div><div class="line">    &#125;);</div><div class="line">&#125;,</div><div class="line">function (node, value) &#123;</div><div class="line">    node.textContent = typeof value == &apos;undefined&apos; ? &apos;&apos; : value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取到最外层节点后，调用compileElement函数，对所有子节点进行判断，如果节点是文本节点且匹配双花括号这种形式指令的节点就开始进行编译处理，编译处理首先需要初始化视图数据，对应上面所说的步骤1，接下去需要生成一个并绑定更新函数的订阅器，对应上面所说的步骤2。这样就完成指令的解析、初始化、编译三个过程，一个解析器Compile也就可以正常的工作了。为了将解析器Compile与监听器Observer和订阅者Watcher关联起来，我们需要再修改一下类DemoVue函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function DemoVue (options) &#123;</div><div class="line">    var self = this;</div><div class="line">    this.vm = this;</div><div class="line">    this.data = options;</div><div class="line"> </div><div class="line">    Object.keys(this.data).forEach(function(key) &#123;</div><div class="line">        self.proxyKeys(key);</div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    observe(this.data);</div><div class="line">    new Compile(options, this.vm);</div><div class="line">    return this;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>更改后，我们就不要像之前通过传入固定的元素值进行双向绑定了，可以随便命名各种变量进行双向绑定了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;app&quot;&gt;</div><div class="line">        &lt;h2&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt;</div><div class="line">        &lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;script src=&quot;js/observer.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;js/watcher.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;js/compile.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;js/index.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line"> </div><div class="line">    var selfVue = new DemoVue(&#123;</div><div class="line">        el: &apos;#app&apos;,</div><div class="line">        data: &#123;</div><div class="line">            title: &apos;hello world&apos;,</div><div class="line">            name: &apos;&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"> </div><div class="line">    window.setTimeout(function () &#123;</div><div class="line">        selfVue.title = &apos;你好&apos;;</div><div class="line">    &#125;, 2000);</div><div class="line"> </div><div class="line">    window.setTimeout(function () &#123;</div><div class="line">        selfVue.name = &apos;canfoo&apos;;</div><div class="line">    &#125;, 2500);</div><div class="line"> </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>如上代码，在页面上可观察到，刚开始titile和name分别被初始化为 ‘hello world’ 和空，2s后title被替换成 ‘你好’ 3s后name被替换成 ‘canfoo’ 了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要尝试使用es6新特性Object.defineProperty()来实现一个简单的双向绑定案例。&lt;br&gt;相关代码已经放在 &lt;a href=&quot;https://github.com/Zacharyweb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt;，会持续更新。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
