<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ios和android 浏览器适配问题记录]]></title>
    <url>%2F2017%2F08%2F11%2Fios%E5%92%8Candroid%20%E6%B5%8F%E8%A7%88%E5%99%A8%E9%80%82%E9%85%8D%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[参与手机端页面开发也有一段时间了，在此记录一些工作中遇到的ios和android 浏览器适配问题以及相应的解决方案，会持续更新。 移动端translateZ会影响定位元素的z-index1解决方案：给定位的元素也添加translateZ(npx),其中n需要大于其余translateZ的值。 IOS移动端click事件300ms的延迟响应12345678移动设备上的web网页是有300ms延迟的，玩玩会造成按钮点击延迟甚至是点击失效。这是由于区分单击事件和双击屏幕缩放的历史原因造成的,2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，你就能看清该部分放大后的内容，再次双击后能回到原始状态。双击缩放是指用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;，此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为300毫秒。这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。解决方案：fastclick可以解决在手机上点击事件的300ms延迟zepto的touch模块，tap事件也是为了解决在click的延迟问题触摸事件的响应顺序为 touchstart --&gt; touchmove --&gt; touchend --&gt; click,也可以通过绑定ontouchstart事件，加快对事件的响应，解决300ms延迟问题 一些情况下对非可点击元素如(label,span)监听click事件，ios下不会触发1解决方案：css增加cursor:pointer; 三星手机遮罩层下的input、select、a等元素可以被点击和focus(点击穿透)123问题发现于三星手机，这个在特定需求下才会有，因此如果没有类似问题的可以不看。首先需求是浮层操作，在三星上被遮罩的元素依然可以获取focus、click、change)，有两种解决方案：1.是通过层显示以后加入对应的class名控制，截断显示层下方可获取焦点元素的事件获取2.是通过将可获取焦点元素加入的disabled属性，也可以利用属性加dom锁定的方式（disabled的一种变换方式） h5页面当输入框在最底部，点击软键盘后输入框会被遮挡。123456789//可采用如下方式解决var oHeight = $(document).height(); //浏览器当前的高度$(window).resize(function()&#123; if($(document).height() &lt; oHeight)&#123; $(&quot;#footer&quot;).css(&quot;position&quot;,&quot;static&quot;); &#125;else&#123; $(&quot;#footer&quot;).css(&quot;position&quot;,&quot;absolute&quot;); &#125; &#125;); 不让 Android 手机识别邮箱1&lt;meta content=&quot;email=no&quot; name=&quot;format-detection&quot; /&gt; 禁止 iOS 识别长串数字为电话1&lt;meta content=&quot;telephone=no&quot; name=&quot;format-detection&quot; /&gt; 禁止 iOS 弹出各种操作窗口1-webkit-touch-callout:none 禁止ios和android用户选中文字1-webkit-user-select:none ios下取消input在输入的时候英文首字母的默认大写1&lt;input autocapitalize=&quot;off&quot; autocorrect=&quot;off&quot; /&gt; 在ios和andriod中,audio元素和video元素无法自动播放1$(&apos;html&apos;).one(&apos;touchstart&apos;,function()&#123; audio.play()&#125;) 参考链接：http://www.jianshu.com/p/31e53df2ecce來源：简书]]></content>
      <categories>
        <category>兼容问题</category>
      </categories>
      <tags>
        <tag>ios</tag>
        <tag>android</tag>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webpack踩坑记录]]></title>
    <url>%2F2017%2F08%2F01%2Fwebpack%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[在此记录学习webpack过程中踩过的坑，将自身实际操作过程中遇到的问题记录下来，用于后续回顾。 xxx-loader省略-loader带来的问题在老版本的webpack中，可以用省略的写法来写loader，例如1234loaders: [&#123; test: /\.css$/, loader: &quot;style!css&quot; &#125;], 但在现在新版本中，已经不允许省略写法了，必须使用全称，比如1234loaders: [&#123; test: /\.css$/, loader: &quot;style-loader!css-loader&quot; &#125;], 在js中require(css)后，样式嵌入在js中，没有独立的css文件webpack的默认设置中，如果没有引入特殊的第三方插件，在js中require的css文件是会自动写入到相应打包出的js中的，这样有以下缺点: js是阻塞加载的，样式会出现很慢 没有单独的css文件，缓存也不便，而且不符合开发习惯 需要引入一个第三方插件 extract-text-webpack-plugin，具体如下:123456789101112131415161718//头部引入css打包插件const ExtractTextPlugin = require(&quot;extract-text-webpack-plugin&quot;);//声明对应的loadersloaders: [&#123; test: /\.css$/, //请注意loader里的写法，有一些低版本的例子中是过时的写法 loader: ExtractTextPlugin.extract(&#123; fallback: &quot;style-loader&quot;, use: &quot;css-loader&quot; &#125;)&#125;],plugins: [ ... //这样会定义，所有js文件中通过require引入的css都会被打包成相应文件名字的css new ExtractTextPlugin(&quot;[name].css&quot;),], 注意，以上loaders和plugins中都必须声明，缺一不可 ExtractTextPlugin 插件loader写法不对导致报错在引用ExtractTextPlugin 插件时，使用了如下写法，会导致报错1234loaders: [&#123; test: /\.css$/, loader: ExtractTextPlugin.extract([&quot;style-loader&quot;,&quot;css-loader&quot;])&#125;], 原因是这种写法已经过时，在新版本中，根据命令台中的提示，修改为最新写法即可:1234567loaders: [&#123; test: /\.css$/, loader: ExtractTextPlugin.extract(&#123; fallback: &quot;style-loader&quot;, use: &quot;css-loader&quot; &#125;)&#125;], chunkhash只适用于js和css，img仍与font文件然需要用到hash1234loaders: [ &#123;test:/\.(png|gif|jpg|jpeg|bmp)$/i,loader:&apos;url-loader?limit=5000&amp;name=img/[name].[hash].[ext]&apos;&#125;, &#123; test:/\.(woff|woff2|svg|ttf|eot)($|\?)/i, loader:&apos;url-loader?limit=5000&amp;name=fonts/[name].[hash].[ext]&apos;&#125; ], js和js引入的css的chunkhash相同的webpack的编译理念，webpack将css视为js的一部分，所以在计算chunkhash时，会把所有的js代码和css代码混合在一起计算，解决方案如下：12// css是使用ExtractTextPlugin插件引入的，这时候可以使用到这个插件提供的contenthashnew ExtractTextPlugin(&quot;[name]-[contenthash].css&quot;) react组件中img标签src指向的图片不能被打包在react组件里的src需要采用以下写法：1&lt;img src=&#123;require(&apos;../../xxx/xxx.png&apos;)&#125; alt=&quot;&quot;/&gt; 暂时先记录以上，后续踩坑会持续更新。 参考资料：入门Webpack，看这篇就够了&emsp;&emsp;Webpack中hash与chunkhash的区别]]></content>
      <categories>
        <category>构建工具</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端性能优化方法]]></title>
    <url>%2F2017%2F06%2F21%2F%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[在之前的项目中学习并使用了一些项目性能优化的方法，主要从减少HTTP请求与压缩资源两个方面入手，在此做些整理记录。 减少HTTP请求合并静态资源包括CSS，JavaScript和小图片，减少HTTP请求。 使用CDN使用CDN或者一些公开库使用第三方提供的静态资源地址。一方面增加并发下载量，另一方面能够和其他网站共享缓存。 延长静态资源缓存时间这样做可以使频繁访问网站的访客能更快地访问。不过，这里要通过修改文件名的方式，确保在资源更新的时候，用户能拉取到最新的内容。 压缩资源压缩源码和图片 JavaScript文件源码可以采用混淆压缩的方式。 CSS文件源码进行普通压缩。 JPG图片可以根据质量来压缩为50%到70%。 PNG可以使用一些开源压缩软件压缩，比如24色变8色、去掉一些PNG格式信息等。 选择合适的图片格式 如果图片颜色数较多就使用JPG格式。 如果图片颜色数较少就使用PNG格式。 如果能够通过服务器端判断浏览器支持WebP，那么就使用WebP格式和SVG格式。 开启服务器端Gzip压缩这些对文本资源非常有效，对图片资源则没那么大压缩比率。 其他 把CSS放在页面头部，JavaScript放在页面底部。这样就不会阻塞页面渲染，让页面出现长时间的空白。]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[仿Vue双向绑定demo]]></title>
    <url>%2F2017%2F05%2F12%2F%E4%BB%BFVue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9Ademo%2F</url>
    <content type="text"><![CDATA[本文主要尝试使用es6新特性Object.defineProperty()来实现一个简单的双向绑定案例。相关代码已经放在 Github，会持续更新。 Vue双向绑定实现过程从开始接触Vue开始，我们便对它的“数据响应”赞叹不绝。我们知道，Vue的双向绑定是基于es6的Object.defineProperty()方法实现的，Vue通过Object.defineProperty()来实现对数据的劫持，并触发对视图的更新工作。展开来说，当数据改变时，Object.defineProperty()对属性设置一个set函数，当数据改变时就会触发这个函数，所以我们只要将更新方法放在里面就可以实现数据到视图的更新了。如果还不熟悉其用法，请点击这里阅读更多用法。 本案例实现步骤1.实现一个监听器Observer，用来劫持并监听所有属性，如有变动，就通知订阅者Watcher。2.实现一个订阅者Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。3.实现一个关联者Dep，将Observer和Watcher关联起来。4.实现一个解析器Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。 实现一个ObserverObserver是一个数据监听器，其实现核心方法就是前文所说的Object.defineProperty( )。如果要对所有属性都进行监听的话，那么可以通过递归方法遍历所有属性值，并对其进行Object.defineProperty( )处理。思路分析中，还需要创建一个可以容纳订阅者的消息订阅器Dep，订阅器Dep主要负责收集订阅者，然后再属性变化的时候执行对应订阅者的更新函数。所以显然订阅器需要有一个容器，这个容器就是list，将上面的Observer稍微改造下，植入消息订阅器：123456789101112131415161718192021222324252627282930313233343536function defineReactive(data, key, val) &#123; observe(val); // 递归遍历所有子属性 var dep = new Dep(); Object.defineProperty(data, key, &#123; enumerable: true, configurable: true, get: function() &#123; if (是否需要添加订阅者) &#123; dep.addSub(watcher); // 在这里添加一个订阅者 &#125; return val; &#125;, set: function(newVal) &#123; if (val === newVal) &#123; return; &#125; val = newVal; console.log(&apos;属性&apos; + key + &apos;已经被监听了，现在值为：“&apos; + newVal.toString() + &apos;”&apos;); dep.notify(); // 如果数据变化，通知所有订阅者 &#125; &#125;);&#125; function Dep () &#123; this.subs = [];&#125;Dep.prototype = &#123; addSub: function(sub) &#123; this.subs.push(sub); &#125;, notify: function() &#123; this.subs.forEach(function(sub) &#123; sub.update(); &#125;); &#125;&#125;; 从代码上看，我们将订阅器Dep添加一个订阅者设计在getter里面，这是为了让Watcher初始化进行触发，因此需要判断是否要添加订阅者，至于具体设计方案，下文会详细说明的。在setter函数里面，如果数据变化，就会去通知所有订阅者，订阅者们就会去执行对应的更新的函数。到此为止，一个比较完整Observer已经实现了，接下来我们开始设计Watcher。 实现Watcher订阅者Watcher在初始化的时候需要将自己添加进订阅器Dep中，那该如何添加呢？我们已经知道监听器Observer是在get函数执行了添加订阅者Wather的操作的，所以我们只要在订阅者Watcher初始化的时候出发对应的get函数去执行添加订阅者操作即可，那要如何触发get的函数，再简单不过了，只要获取对应的属性值就可以触发了，核心原因就是因为我们使用了Object.defineProperty( )进行数据监听。这里还有一个细节点需要处理，我们只要在订阅者Watcher初始化的时候才需要添加订阅者，所以需要做一个判断操作，因此可以在订阅器上做一下手脚：在Dep.target上缓存下订阅者，添加成功后再将其去掉就可以了。订阅者Watcher的实现如下：1234567891011121314151617181920212223242526function Watcher(vm, exp, cb) &#123; this.cb = cb; this.vm = vm; this.exp = exp; this.value = this.get(); // 将自己添加到订阅器的操作&#125; Watcher.prototype = &#123; update: function() &#123; this.run(); &#125;, run: function() &#123; var value = this.vm.data[this.exp]; var oldVal = this.value; if (value !== oldVal) &#123; this.value = value; this.cb.call(this.vm, value, oldVal); &#125; &#125;, get: function() &#123; Dep.target = this; // 缓存自己 var value = this.vm.data[this.exp] // 强制执行监听器里的get函数 Dep.target = null; // 释放自己 return value; &#125;&#125;; 这时候，我们需要对监听器Observer也做个稍微调整，主要是对应Watcher类原型上的get函数。需要调整地方在于defineReactive函数：1234567891011121314151617181920212223function defineReactive(data, key, val) &#123; observe(val); // 递归遍历所有子属性 var dep = new Dep(); Object.defineProperty(data, key, &#123; enumerable: true, configurable: true, get: function() &#123; if (Dep.target) &#123;. // 判断是否需要添加订阅者 dep.addSub(Dep.target); // 在这里添加一个订阅者 &#125; return val; &#125;, set: function(newVal) &#123; if (val === newVal) &#123; return; &#125; val = newVal; console.log(&apos;属性&apos; + key + &apos;已经被监听了，现在值为：“&apos; + newVal.toString() + &apos;”&apos;); dep.notify(); // 如果数据变化，通知所有订阅者 &#125; &#125;);&#125;Dep.target = null; 到此为止，简单版的Watcher设计完毕，这时候我们只要将Observer和Watcher关联起来，就可以实现一个简单的双向绑定数据了。因为这里没有还没有设计解析器Compile，所以对于模板数据我们都进行写死处理，假设模板上又一个节点，且id号为’name’，并且双向绑定的绑定的变量也为’name’，且是通过两个大双括号包起来（这里只是为了掩饰，暂时没什么用处），模板如下：123&lt;body&gt; &lt;h1 id=&quot;name&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;&lt;/body&gt; 这时候我们需要将Observer和Watcher关联起来：123456789function DemoVue (data, el, exp) &#123; this.data = data; observe(data); el.innerHTML = this.data[exp]; // 初始化模板数据的值 new Watcher(this, exp, function (value) &#123; el.innerHTML = value; &#125;); return this;&#125; 然后在页面上new以下DemoVue类，就可以实现数据的双向绑定了：123456789101112131415161718&lt;body&gt; &lt;h1 id=&quot;name&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;&lt;/body&gt;&lt;script src=&quot;js/observer.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/watcher.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/index.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; var ele = document.querySelector(&apos;#name&apos;); var selfVue = new DemoVue(&#123; name: &apos;hello world&apos; &#125;, ele, &apos;name&apos;); window.setTimeout(function () &#123; console.log(&apos;name值改变了&apos;); selfVue.data.name = &apos;canfoo&apos;; &#125;, 2000); &lt;/script&gt; 这时候打开页面，可以看到页面刚开始显示了是’hello world’，过了2s后就变成’canfoo’了。到这里，总算大功告成一半了，但是还有一个细节问题，我们在赋值的时候是这样的形式 ‘ selfVue.data.name = ‘canfoo’ ‘ 而我们理想的形式是’ selfVue.name = ‘canfoo’ ‘为了实现这样的形式，我们需要在new DemoVue的时候做一个代理处理，让访问selfVue的属性代理为访问selfVue.data的属性，实现原理还是使用Object.defineProperty( )对属性值再包一层：12345678910111213141516171819202122232425262728293031function DemoVue (data, el, exp) &#123; var self = this; this.data = data; Object.keys(data).forEach(function(key) &#123; self.proxyKeys(key); // 绑定代理属性 &#125;); observe(data); el.innerHTML = this.data[exp]; // 初始化模板数据的值 new Watcher(this, exp, function (value) &#123; el.innerHTML = value; &#125;); return this;&#125; DemoVue.prototype = &#123; proxyKeys: function (key) &#123; var self = this; Object.defineProperty(this, key, &#123; enumerable: false, configurable: true, get: function proxyGetter() &#123; return self.data[key]; &#125;, set: function proxySetter(newVal) &#123; self.data[key] = newVal; &#125; &#125;); &#125;&#125; 实现Compile虽然上面已经实现了一个双向数据绑定的例子，但是整个过程都没有去解析dom节点，而是直接固定某个节点进行替换数据的，所以接下来需要实现一个解析器Compile来做解析和绑定工作。解析器Compile实现步骤：1.解析模板指令，并替换模板数据，初始化视图2.将模板指令对应的节点绑定对应的更新函数，初始化相应的订阅器为了解析模板，首先需要获取到dom元素，然后对含有dom元素上含有指令的节点进行处理，因此这个环节需要对dom操作比较频繁，所有可以先建一个fragment片段，将需要解析的dom节点存入fragment片段里再进行处理：12345678910function nodeToFragment (el) &#123; var fragment = document.createDocumentFragment(); var child = el.firstChild; while (child) &#123; // 将Dom元素移入fragment中 fragment.appendChild(child); child = el.firstChild &#125; return fragment;&#125; 接下来需要遍历各个节点，对含有相关指定的节点进行特殊处理，这里咱们先处理最简单的情况，只对带有双花括号这种形式的指令进行处理： 123456789101112131415161718192021222324252627function compileElement (el) &#123; var childNodes = el.childNodes; var self = this; [].slice.call(childNodes).forEach(function(node) &#123; var reg = /\&#123;\&#123;(.*)\&#125;\&#125;/; var text = node.textContent; if (self.isTextNode(node) &amp;&amp; reg.test(text)) &#123; // 判断是否是符合这种形式&#123;&#123;&#125;&#125;的指令 self.compileText(node, reg.exec(text)[1]); &#125; if (node.childNodes &amp;&amp; node.childNodes.length) &#123; self.compileElement(node); // 继续递归遍历子节点 &#125; &#125;);&#125;,function compileText (node, exp) &#123; var self = this; var initText = this.vm[exp]; this.updateText(node, initText); // 将初始化的数据初始化到视图中 new Watcher(this.vm, exp, function (value) &#123; // 生成订阅器并绑定更新函数 self.updateText(node, value); &#125;);&#125;,function (node, value) &#123; node.textContent = typeof value == &apos;undefined&apos; ? &apos;&apos; : value;&#125; 获取到最外层节点后，调用compileElement函数，对所有子节点进行判断，如果节点是文本节点且匹配双花括号这种形式指令的节点就开始进行编译处理，编译处理首先需要初始化视图数据，对应上面所说的步骤1，接下去需要生成一个并绑定更新函数的订阅器，对应上面所说的步骤2。这样就完成指令的解析、初始化、编译三个过程，一个解析器Compile也就可以正常的工作了。为了将解析器Compile与监听器Observer和订阅者Watcher关联起来，我们需要再修改一下类DemoVue函数：12345678910111213function DemoVue (options) &#123; var self = this; this.vm = this; this.data = options; Object.keys(this.data).forEach(function(key) &#123; self.proxyKeys(key); &#125;); observe(this.data); new Compile(options, this.vm); return this;&#125; 更改后，我们就不要像之前通过传入固定的元素值进行双向绑定了，可以随便命名各种变量进行双向绑定了：1234567891011121314151617181920212223242526272829&lt;body&gt; &lt;div id=&quot;app&quot;&gt; &lt;h2&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt; &lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt; &lt;/div&gt;&lt;/body&gt;&lt;script src=&quot;js/observer.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/watcher.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/compile.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/index.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; var selfVue = new DemoVue(&#123; el: &apos;#app&apos;, data: &#123; title: &apos;hello world&apos;, name: &apos;&apos; &#125; &#125;); window.setTimeout(function () &#123; selfVue.title = &apos;你好&apos;; &#125;, 2000); window.setTimeout(function () &#123; selfVue.name = &apos;canfoo&apos;; &#125;, 2500); &lt;/script&gt; 如上代码，在页面上可观察到，刚开始titile和name分别被初始化为 ‘hello world’ 和空，2s后title被替换成 ‘你好’ 3s后name被替换成 ‘canfoo’ 了。]]></content>
      <categories>
        <category>框架学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>双向绑定</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git常用命令汇总]]></title>
    <url>%2F2017%2F02%2F23%2Fgit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[记录一些常用的git命令。 Git命令汇总git config 配置本地仓库 常用git config –global user.name、git config –global user.email git config –list查看配置详情 git init初始一个仓库，添加–bare可以初始化一个共享（裸）仓库 git status可以查看当前仓库的状态 git add “文件”将工作区中的文件添加到暂存区中，其中file可是一个单独的文件，也可以是一个目录、“*”、-A git commit -m ‘备注信息’将暂存区的文件，提交到本地仓库 git log可以查看本地仓库的提交历史 git branch查看分支 git branch “分支名称”创建一个新的分支 git checkout “分支名称”切换分支 git checkout -b deeveloper创建并切到developer分支 git merge “分支名称”合并分支 git branch -d “分支名称”删除分支 git clone “仓库地址”获取已有仓库的副本，会默认创建master分支 git push origin “本地分支名称:远程分支名称”将本地分支推送至远程仓库 git push origin hotfix（通常的写法）相当于 git push origin hotfix:hotfix git push origin hotfix:newfeature 本地仓库分支名称和远程仓库分支名称一样的情况下可以简写成一个，即git push “仓库地址” “分支名称”，如果远程仓库没有对应分支，将会自动创建 git remote add “主机名称” “远程仓库地址”添加远程主机，即给远程主机起个别名，方便使用 git remote可以查看已添加的远程主机 git remote show “主机名称”可以查看远程主机的信息]]></content>
      <categories>
        <category>辅助工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[express学习笔记(1)]]></title>
    <url>%2F2017%2F02%2F07%2Fexpress%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Express是用来加快我们开发Web应用程序的一个Web开发框架,在此记录一下express框架的基础使用。 基本使用 安装npm install express 创建一个app实例 12var express = require(&apos;express&apos;);var app = express(); 在项目中使用： 123456789101112131415161718192021222324252627'use strict';const express = require('express');const path = require('path');const app = express();// 配置静态资源处理app.use('/www',express.static(path.join(__dirname,'www')));// 配置模板引擎app.set('views',path.join(__dirname,'views')); // 这里配置的是模板文件存放的目录app.set('view engine','ejs'); // 注意：使用ejs模板引擎需要单独下载// 处理网站首页请求app.get('/',function(req,res)&#123; res.send('这里可以处理请求路径是 / 并且请求方法是get的请求');&#125;);// 处理用户登录请求app.post('/login',function(req,res)&#123; res.send('这里可以处理请求路径是 /login 并且请求方法是post的请求路径');&#125;);// 通过调用 app 实例的 listen 方法，和原生的 server.listen() 是一样的app.listen(3000,'127.0.0.1',function()&#123; console.log('服务器已开启，请访问 http://127.0.0.1:3000/ 端口');&#125;); 基本APIapp.all()app.all(path, callback [, callback …])：对任何请求都会调用该处理函数。 app.get()app.get(path, callback [, callback …])：该方法可以处理get请求的url。 app.listen()app.listen(port, [hostname], [backlog], [callback])：和原生的server.listen 是一样的。 app.post()app.post(path, callback [, callback …])：该方法可以处理post请求的url。 app.route()app.route(path)：路由。 12345678910111213var app = express();app.route('/events').all(function(req, res, next) &#123; // runs for all HTTP verbs first // think of it as route specific middleware!&#125;).get(function(req, res, next) &#123; res.json(...);&#125;).post(function(req, res, next) &#123; // maybe add a new event...&#125;) app.set()app.set(name, value) views 可以设置模板文件所在的位置 view engine 可以设置使用哪个模板引擎 view cache 是否缓存模板 app.use()app.use([path,] function [, function…]) 第一个参数 path 可选的，表示要匹配的路径的意思 第二个参数一般是一个函数，函数里面的参数是：req,res,next req表示请求对象 res表示响应对象 next 表示下一个要匹配的中间件 Requestreq.app我们可以通过给 app 动态的挂载一些属性，然后就可以在req对象上直接通过app访问app的一些属性.123456app.locals.foo = 'bar';app.get('/', function (req, res, next) &#123; console.log(req.app.locals.foo);&#125;); req.body可以通过req.body 获取post请求提交的表单参数。 注意：如果要使用req.body，必须使用第三方中间件 123456789var express = require(&apos;express&apos;);var bodyParser = require(&apos;body-parser&apos;);var app = express();// parse application/x-www-form-urlencodedapp.use(bodyParser.urlencoded(&#123; extended: false &#125;))// 上面的操作完毕后，在以后的中间件中，就可以直接通过req.body来获取post请求体了 req.hostname可以获取主机名，或者说是域名。 req.ip可以获取客户端请求的IP地址。 req.params当匹配/user/:uid/:haha到这种url的时候，直接将 uid、hah 挂载到 req.params 对象上。 req.path获取客户端请求路径部分，不包含查询字符串。 req.query可以直接通过它获取get请求参数。 Responseres.locals我们可以通过给locals挂载一些通用的数据，方便在多个地方使用。 res.download()res.download(path [, filename] [, fn])：可以主动让客户端下载这个文件。 res.json()res.json([body])：直接向客户端响应一个json格式的字符串。 res.redirect()res.redirect([status,] path)：让客户端重定向。 例如：让客户端跳转到首页：res.redirect(&#39;/&#39;)。 让客户端重定向到登录页面：res.redirect(&#39;/login&#39;)。 让客户端，直接在当前页面刷新：res.redirect(&#39;back&#39;)。 res.render()res.render(view [, locals] [, callback])：向客户端响应一个模板，然后注入模板数据。123456789101112// send the rendered view to the clientres.render(&apos;index&apos;);// if a callback is specified, the rendered HTML string has to be sent explicitlyres.render(&apos;index&apos;, function(err, html) &#123; res.send(html);&#125;);// pass a local variable to the viewres.render(&apos;user&apos;, &#123; name: &apos;Tobi&apos; &#125;, function(err, html) &#123; // ...&#125;); res.send()res.send([body])：向客户端发送普通文本，它自己会end。 Router基本使用：12345678910111213var router = express.Router([options]);// 直接给route挂载一些中间件// invoked for any requests passed to this routerrouter.use(function(req, res, next) &#123; // .. some logic here .. like any other middleware next();&#125;);// will handle any request that ends in /events// depends on where the router is "use()'d"router.get('/events', function(req, res, next) &#123; // ..&#125;); router最终要把它作为一个中间件，被use到 app 上,在app.js中，直接：12const router = require(&apos;./router&apos;);app.use(router);]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js学习笔记(1)]]></title>
    <url>%2F2017%2F01%2F12%2FNodeJS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(1)%2F</url>
    <content type="text"><![CDATA[本文主要阐述Node.js模块系统、包、NPM和process进程对象的相关知识及个人理解。 模块系统在Node.js中，模块分为两类： 一种是Node提供的模块，称为核心模块， 一种是用户编写的模块，称为文件模块 核心模块核心模块是Node.js原生提供的。加载核心模块的时候，不需要传入路径，因为Node.js已经将核心模块的文件代码编译到了二进制的可执行文件中了。在加载的过程中，原生的核心模块的优先级是是最高的。主要核心模块如下列出： fs http os path querystring url 文件模块文件模块通常以./或../开始的相对路径加载。 在加载一个自己编写的模块的时候，最好使用__dirname 和 你要加载的模块的文件名拼接。 文件模块也可以以/开始的绝对路径加载，但不建议使用： 在Linux或者MAc的操作系统中，/表示系统的根路径。 在Windows中，/表示当前文件模块所属的根磁盘路径。 标识符中可以不包含扩展名，Node会按照.js、.node、.json的次序补足扩展名，依次尝试，直到找到为止。如果找不到，报错。不包含扩展名的时候，Node.js会按照： 路径.js 以后自己在加载js文件模块的时候，就省略掉.js后缀就可以了 路径.node 后缀为node的文件是c/c++写的一些扩展模块 路径.json 如果是加载json文件模块，最好加上后缀.json，能稍微的提高一点加载的速度 .json文件最终Node.js也是通过fs读文件的形式读取出来的，然后通过JSON.parse()转换成一个对象。Node.js会通过同步阻塞的方式看这个路径是否存在 模块加载特点模块会优先从缓存加载，模块只在第一次加载的时候运行一次。 包包其实就是一种特殊的文件模块 问题：你开的一个功能模块，还是以文件的形式散列的，你给别人使用的时候很麻烦。 包的作用：在模块的基础上进一步组织JavaScript代码。 包的组成 包结构 包描述文件package.json，描述你的当前的包的一些相关的信息。 包的加载机制 module.paths属性，里面存储加载路径。 package.jsonpackage.json是包的描述文件。 package.json文件内部就是一个JSON对象，该对象的每一个成员就是当前项目的一项设置， 比如name就是项目名称，version就是项目的版本号。在模块的加载机制中，有一个main属性是非常重要的，它很大意义上决定了包要导出的模块位置。 npmnpm是基于包的规范实现的一个包管理工具。这种东西的最终的目的就是：让你的开发模式工程化，都依靠工具来管理。npm包含以下两方面： 是一个基于Node.js开发的包的托管网站 Node.js包管理工具 npm install 包名 当执行npm install的时候，它会自动跑到npm的网站，然后找到该包的github地址。 找到之后，下载这个压缩包，然后在执行npm install的当前目录下找一个叫做node_modules目录。 如果找到，直接解压这个压缩包，到node_modules目录下。 如果找不到，则新建一个node_modules目录，解压到该目录。 npm install 当执行npm install的时候，会自动在当前目录中查找package.json文件 如果找到，找里面的 dependencies 字段，安装该字段中所有依赖的项 npm install –save 在做项目的时候，先初始化一个package.json文件， 在安装第三方包依赖的时候，必须使用npm install –save express,添加依赖项到package.json文件中（实际就是添加到dependencies字段中）。 processprocess对象是Node的一个全局对象，提供当前Node进程的信息。它可以在脚本的任意位置使用，不需要通过require方法加载。 基本属性process.argv返回当前进程的命令行参数数组。 argv属性返回一个数组，由命令行执行脚本时的各个参数组成。 它的第一个成员总是node可执行文件的绝对路径，第二个成员是脚本的绝对路径，其余成员是脚本文件的参数。 一般在argv中，真正的用户输入的参数是从process.argv[2]开始的。要得到真正的参数部分：process.argv.slice(2)就可以了。 process.env返回一个对象，成员为当前控制台的环境变量。 process.pid返回当前进程的进程号。 process.platform返回当前的操作系统平台，比如win32。 process.version返回Node的版本号，如4.3.1。 主要属性stdout（standard output）stdout属性指向标准输出（standard output）。它的write方法等同于console.log，可以用在标准输出向用户显示内容。 stdin（standard input）stdin表示标准输入。 stderr（standard error）process的一些方法process.exit()该方法可以用来退出当前进程。 process.nextTick()process.nextTick将任务放到当前一轮事件循环的尾部。 123process.nextTick(function()&#123; console.log(&apos;foo&apos;);&#125;); 上面代码可以用setTimeout(function(){},0)改写，效果接近，但是原理不同 123setTimeout(function()&#123; console.log(&apos;f00&apos;);&#125;,0); setTimeout(function(){},0)是将任务放到下一轮事件循环的头部，因此nextTick会比它先执行。nextTick的效率更高，因为不用检查是否到了指定时间。 process.kill()该方法可以通过指定一个进程id，终止该进程。 例如我打开了一个记事本notepad.exe程序，没有退出，我通过任务管理器查看到该进程id是72184，当我在Node.js的脚本代码中写了这样一行代码：process.kill(72184),当完成后，notepad程序这个时候就终止了。 process的一些事件exit事件当进程退出时，会触发exit事件，可以对该事件指定回调函数 123process.on(&apos;exit&apos;, function() &#123; console.log(&apos;程序退出了&apos;);&#125;) 示例：通过为process添加exit事件，当进程退出的时候，打印一段日志 123process.on(&apos;exit&apos;,function() &#123; console.log(&apos;程序运行结束时间：&apos; + new Date());&#125;); uncaughtException事件当Node.js进程抛出一个没有被捕获的错误时，会触发uncaughtException事件]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[http协议浅尝]]></title>
    <url>%2F2016%2F12%2F21%2Fhttp%E5%8D%8F%E8%AE%AE%E6%B5%85%E5%B0%9D%2F</url>
    <content type="text"><![CDATA[http协议是客户端和服务器通信的一种规范、或者说是一种语言，本文主要记录一些自己对http协议的理解。 从http角度分析网页加载过程当你输入一个网址到网页加载呈现在你眼前，这个看似简答的过程中其实发生了如下步骤： 浏览器会把输入的域名发送给DNS服务器，通过DNS服务器解析为IP地址。 IP地址是具体的用来定义网络中的一台计算机中，通过IP地址访问到需要访问的服务器。 通过IP地址找到服务器之后，再通过端口来找服务器进程通信。 服务器收到请求后返回相应的数据给客户端浏览器。 浏览器根据服务器返回的数据对页面进行渲染并呈现。 TCP三次握手连接在客户端跟服务器进行数据交互时，其实要先通过TCP三次握手连接确定已经建立连接。 第一次：客户端向服务器发送消息，发完之后，客户端不知道服务器有没有收到这个消息。如果收到服务器给的消息之后就意味着服务器可以正常的接收我的消息了。 第二次：服务器接收到了客户端发来的消息之后，给客户端回复一个消息。 第三次：客户端接收到服务器给的消息之后再次给服务器端发送一段消息 经历这三次之后，就意味着：客户端可以确定服务器可以收到自己的消息，服务器也可以确定客户端可以收到自己的消息。 http协议相关概念url例如http://example.com/part/index.htm 就是一个url，用于定位一个网络资源。 http:// 协议类型 example.com 域名，主机名 /part/index.htm 请求路径 域名例如www.taobao.com就是一个域名，通常我们可以通过域名访问一个网站，但其实域名本身是无法实现通信的，域名的作用仅仅是为了方便记忆。每一个域名都对应一个唯一的IP地址，浏览器通过域名从DNS服务器获取相应的IP地址后才能向正确的服务器发送请求，来获得数据，实现通信。 IP地址IP地址实际上就是用来定位一台计算机的位置的，浏览器通过IP地址定位到了服务器。那么定位到计算机之后，到底要和谁通信？ 端口IP地址是家、端口号就是门，具体的定义一台计算机中的程序的。 端口号用来通信的软件才会占用一个端口号，端口号不能重复。 http的默认端口就是80，如果你输入了www.taobao.com www.taobao.com:80 请求报文 请求首行 请求首部字段 请求报文数据 响应报文 响应首行 响应首部字段 响应报文数据]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery中4种绑定事件方法的区别]]></title>
    <url>%2F2016%2F09%2F22%2FjQuery%E4%B8%AD4%E7%A7%8D%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[jQuery中可以通过bind(),live(),delegate(),on()四种方法给元素绑定事件，那么这四种方法有什么区别呢？ bind把事件绑定到每一个匹配的元素上，主要有以下特点： 兼容性比较好 绑定事件到所有选出来的元素上 不会绑定事件到动态添加的那些元素上 当元素很多时，会出现效率问题，特别是嵌套层次比较深的元素。 测试html代码1234567&lt;ul id="ul"&gt; &lt;li&gt;NO1&lt;/li&gt; &lt;li&gt;NO2&lt;/li&gt; &lt;li&gt;NO3&lt;/li&gt; &lt;li&gt;NO4&lt;/li&gt; &lt;li&gt;NO5&lt;/li&gt; &lt;/ul&gt; JavaScript代码123$("li").bind("click", function (event) &#123; alert("OK"); &#125;); jQuery源码 调试数据 总结：需要循环5次来绑定事件。 live把所有的事件都绑定到jquery对象$(document) ，主要有以下特点： 事件只需要绑定一次，不需要绑定到筛选出来的元素上。 动态添加元素后依然拥有绑定事件。 不能使用event.stopPropagation() 来阻止事件的冒泡。 测试JavaScript代码123$("li").live("click", function (event) &#123; alert("OK"); &#125;); jQuery源码 调试数据 总结：只执行一次，事件绑定在根节点对象上。 delegate将事件绑定到指定的父元素上，和live类似但比较能活。主要有以下特点： 可以用在动态添加的元素上 绑定的父元素可以采用就近原则，减少查询的次数，比live的性能好 在live和delegate两者推荐使用delegate 测试JavaScript代码123$("#ul").delegate("li", "click", function (event) &#123; alert("OK"); &#125;); jQuery源码 调试数据 总结：只执行一次，事件绑定在调用对象上。 onon()是jQuery1.7中新增的，前面的三种方法都是依赖on方法来实现的。主要有以下特点： 事件的添加和卸载都要是通过on来实现的，提供一种统一的事件处理方法。 增加了使用的难度，对于不熟悉on的使用的，很有可能就勿用，导致性能下降。 on方法的正确使用1.使用on方法，如果第二个参数使用null，则作用与bind()相同；参考jquery1.7源码。 2.如果第二个参数适用了选择器，就要看调用对象 如果调用对象是$(document)，则作用与live( )相同，参考jquery1.7源码。 否则与delegate()相同，参考jquery1.7源码。]]></content>
      <categories>
        <category>框架学习</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery方法扩展与插件封装]]></title>
    <url>%2F2016%2F09%2F07%2FjQuery%E6%8F%92%E4%BB%B6%E5%B0%81%E8%A3%85%2F</url>
    <content type="text"><![CDATA[jQuery有着成千上万的第三方插件。当我们自己写好了一个独立的功能，想将其与jquery结合起来，并可以用jQuery链式调用，这就要扩展jQuery，写成插件形式了，下面就来简单讲述下 jQuery插件封装的过程。 extend 方法extend方法在jQuery中是一个很重要的方法，jQuey内部用它来扩展静态方法或实例方法，而且我们开发jQuery 插件开发的时候也会用到它。但是在内部，是存在jQuery.fn.extend和jQuery.extend两个extend方法的，而区分这两个 extend方法是理解jQuery的很关键的一部分。先看结论： jQuery.extend(object) 为扩展 jQuery 类本身，为类添加新的静态方法； jQuery.fn.extend(object) 给 jQuery 对象添加实例方法，也就是通过这个 extend 添加的新方法，实例化的 jQuery 对象都能使用，因为它是挂载在 jQuery.fn上的方法。 它们的官方解释是： jQuery.extend(): 把两个或者更多的对象合并到第一个当中， jQuery.fn.extend()：把对象挂载到 jQuery 的 prototype 属性，来扩展一个新的 jQuery 实例方法。 从使用角度来讲，使用jQuery.extend()拓展的静态方法，我们可以直接使用 $.xxx 进行调用（xxx是拓展的方法名），而使用 jQuery.fn.extend() 拓展的实例方法，需要使用 $().xxx 调用。 jQuery.extend()使用合并对象1234var settings = &#123; validate: false, limit: 5, name: "foo" &#125;; var options = &#123; validate: true, name: "bar" &#125;; $.extend(settings, options);console.log(settings); //=&gt; &#123; validate: true, limit: 5, name: "bar" &#125; 扩展静态方法12345678//扩展方法$.extend(&#123; min: function(a, b) &#123; return a &lt; b ? a : b; &#125;, max: function(a, b) &#123; return a &gt; b ? a : b; &#125;&#125;);//调用方法$.min(24,32); // 24 $.max(24,32); // 32 jQuery.fn.extend()使用实现原理我们知道jQuery插件是通过$.fn来进行拓展的，使用 $().xxx进行调用。那么在jQuery内部，这是怎么实现的呢？事实上，jQuery内部源码中,jQuery.fn=jQuery.prototype，所谓的插件其实就是给jQuery的原型添加功能函数。 jQuery.fn.extend(object)html代码1&lt;div id="demo"&gt;我是内容&lt;/div&gt; JavaScript代码123456$.fn.extend(&#123; bold:function()&#123; return this.css(&#123;fontWeight:'bold'&#125;) &#125;&#125;);$('#demo').bold(); 封装jQqury插件定义闭包区域定义一个闭包区域，防止插件”污染”。1234//闭包限定命名空间(function ($) &#123; &#125;)(window.jQuery); jQuery.fn.extend(object)扩展jquery 方法利用jQuery.fn.extend(object)扩展jquery 方法，来制作插件。12345678//闭包限定命名空间(function ($) &#123; $.fn.extend(&#123; "highLight":function(options)&#123; //do something &#125; &#125;);&#125;)(window.jQuery); 给插件默认参数给插件默认参数，实现 插件的功能。1234567891011121314151617181920212223//闭包限定命名空间(function ($) &#123; $.fn.extend(&#123; "highLight": function (options) &#123; var opts = $.extend(&#123;&#125;, defaluts, options); //使用jQuery.extend 覆盖插件默认参数 this.each(function () &#123; //这里的this 就是 jQuery对象 //遍历所有的要高亮的dom,当调用 highLight()插件的是一个集合的时候。 var $this = $(this); //获取当前dom 的 jQuery对象，这里的this是当前循环的dom //根据参数来设置 dom的样式 $this.css(&#123; backgroundColor: opts.background, color: opts.foreground &#125;); &#125;); &#125; &#125;); //默认参数 var defaluts = &#123; foreground: 'red', background: 'yellow' &#125;;&#125;)(window.jQuery); 实现链式调用将jQuery对象返回出来，实现链式调用。1234567891011121314151617181920212223//闭包限定命名空间(function ($) &#123; $.fn.extend(&#123; "highLight": function (options) &#123; var opts = $.extend(&#123;&#125;, defaluts, options); //使用jQuery.extend 覆盖插件默认参数 return this.each(function () &#123; //这里的this 就是 jQuery对象。这里return 为了支持链式调用 //遍历所有的要高亮的dom,当调用 highLight()插件的是一个集合的时候。 var $this = $(this); //获取当前dom 的 jQuery对象，这里的this是当前循环的dom //根据参数来设置 dom的样式 $this.css(&#123; backgroundColor: opts.background, color: opts.foreground &#125;); &#125;); &#125; &#125;); //默认参数 var defaluts = &#123; foreground: 'red', background: 'yellow' &#125;;&#125;)(window.jQuery); 暴露公共方法暴露公共方法，给别人来扩展你的插件（如果有需求的话）。 比如的高亮插件有一个format方法来格式话高亮文本，则我们可将它写成公共的，暴露给插件使用者，不同的使用着根据自己的需求来重写该format方法，从而是高亮文本可以呈现不同的格式。1234//公共的格式化 方法. 默认是加粗，用户可以通过覆盖该方法达到不同的格式化效果。 $.fn.highLight.format = function (str) &#123; return "&lt;strong&gt;" + str + "&lt;/strong&gt;"; &#125; 插件私有方法有些时候，我们的插件需要一些私有方法，不能被外界访问。例如插件里面需要有个方法来检测用户调用插件时传入的参数是否符合规范。 参考：jquery 封装插件]]></content>
      <categories>
        <category>框架学习</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git基础学习与使用(3)]]></title>
    <url>%2F2016%2F07%2F03%2Fgit%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8(3)%2F</url>
    <content type="text"><![CDATA[通过之前学习已经可以很好的管理本地版本控制了，可是如果我们下班回到家里突然来了灵感觉得有部分代码可以优化，如果能接着公司电脑上的代码继续写该有多好呀！另一种情形，假设项目比较大，不同的功能模块由不同的开发人员完成，不同模块儿之间又难免会依赖关系，这时如果我们的代码互相合并（融合）该有多好呀！所有模块开发完毕后，需要整合到一起，要能做到准确无误该有多好呀！借助一个远程仓库，大家可以共享代码、历史版本等数据，便可以解决以上遇到的所有问题，在学习远程仓库前我们先来学习git clone path这个命令。 Git远程仓库获取已有仓库的副本例已存在Git仓库blog,在blog这个目录同级执行,执行以下命令：git clone ./blog 目录名称。1git clone ./copy/ demo 进入到demo目录中12cd demogit log 这时我们可以认为这个这个blog其实就是一个“共享的”仓库了，但是要想创建一个真正的共享仓库，需要做一些特殊的处理。 创建共享仓库 Git要求共享仓库是一个以.git结尾的目录。 mkdir repo.git 创建以.git结尾目录 cd repo.git 进入这个目录 git init –bare 初始化一个共享仓库，注意选项–bare 这样我们就建好了一个共享的仓库，但这时这个仓库是一个空的仓库。 以上是我们直接创建裸仓库的步骤，除了上面的方法外，我们还可以通过git clone –bare 仓库地址的形式，将已有一个仓库导出成裸仓库。 这时我们可以认为这个这个blog其实就是一个“共享的”仓库了，但是要想创建一个真正的共享仓库，需要做一些特殊的处理。 向共享仓库共享内容进入到本地的仓库 copy12cd copygit push ../repo.git master 从共享仓库里取出内容1git clone ./repo.git demo 通过repo.git共享仓库，我们轻松得到了一个copy的副本 通过demo仓库向repo.git共享内容进入到demo里，我们做一些修改12cd demogit push ../repo.git master 在copy仓库从repo.git获取共享的内容12cd copygit pull ../repo.git master 奇迹似乎发生了，我们轻松的将demo仓库里的内容，通过repo.git共享给了copy仓库。惊喜不断，问题也总是不断，我们发现我们这个共享的仓库只是放到了本地的，其它人是没有办法从我们这个共享仓库共享内容的！！！然而现实是，办法总是有的！！！！我们把这个共享的仓库放到一台远程服务器上，问题不就解决了吗？ gitHub如果我们熟悉服务器的话，我们完全可以将上述的步骤在我们的远程服务器上进行操作，然后再做一些登录权限的设置，就可非常完美的搭建一个共享服务器了。其实为了更好的管理我们的仓库，一些第三方机构开发出了Web版仓库管理程序，通过Web界面形式管理仓库。gitHub关于它的名气与意义，大家可以自行查阅，我们这里介绍它的使用。 注册账号并完善资料自行注册略过… 创建共享仓库 填写仓库资料 共享仓库 远程地址特别长，我们可以给他起一个别名 git remote add origin git@github.com:Botue/repo.git,这样origin 就代表 git@github.com:Botue/repo.git 当我们通过git clone 从共享仓库获内容时，会自动帮我们添加origin到对应的仓库地址，例如：git clone git@github.com:Botue/repo.git 会自动添加origin 对应 git@github.com:Botue/repo.git 生成密钥 将id_rsa.pub公钥的内容复制打开gitHub的个人中心 打到SSH keys 到此我们便可以通过gitHub 提供的Web界面来管理我们的仓库了。 我们发现通过gitHub管理仓库实在是太方便了，可是只能免费使用公开仓库，自已公司的代码当然不能公开了，可是私有仓库又是需要交“保护费”的，无耐国人还是比较喜欢免费的，网络界总是有很多雷峰的，比如gitLab!!! gitLab也是一个可以通过Web界面管理仓库的网站程序，我们可以把它架设到公司自已的服务器上，实现仓库私有化，这也是大部分公司通常采用的方法，其使用方法与gitHub十分相似。 省略很多内容…..]]></content>
      <categories>
        <category>辅助工具</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git基础学习与使用(2)]]></title>
    <url>%2F2016%2F07%2F01%2Fgit%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8(2)%2F</url>
    <content type="text"><![CDATA[在我们的现实开发中，需求往往是五花八门的，同时开发个需求的情况十分常见，比如当你正在专注开发一个功能时，突然有一个紧急的BUG需要你来修复，这个时候我们当然是希望在能够保存当前任务进度，再去修改这个BUG，等这个BUG修复完成后再继续我们的任务。如何实现呢？可以通过创建分支来解决实际开发中类似的问题。 Git 分支如下图所示： 当我们在初始化仓库的时候，Git会默认帮我们创建了一个master的分支，并且HEAD默认指向了master末端。 我们也可以创建自已的分支。 创建分支1git branch hotfix 切换分支1git checkout hotfix 我们发现HEAD现在又指向了hotfix的末端 再次提交操作12git add -Agit commit -m 'add some code for hotfix' 这次的提交历史版本就会记录在hotfix这个分支上了，并且HEAD伴随developer在移动。 当我们再次切回到master时1git checkout master 当我们切换回master后，HEAD指向了master分支的末端。 继续之前的开发12git add -Agit commit -m 'add some code for master' 总结： 当我们git checkout branchname时，HEAD会自动指向对应分支的末端，工作目录中的源码也会 随之发生改变。 这个时候我们就在hotfix这个分支上修复了这个BUG，而我们原来在master分支上的操作并未受到影响。 思考一个问题： 现在master这个分支上是否包含了hotfix的修复呢？ 实际上从上图可以看出这时的master分支并没有包含有hotfix的修复。 合并（融合）分支12git checkout mastergit merge hotfix 这时master会有两个父结点了，master便包含了hotfix里的修复了 删除分支这时用来修复BUG创建的hotfix分支已经没有用处了，我们可以将它删除。1git branch -d hotfix]]></content>
      <categories>
        <category>辅助工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git基础学习与使用(1)]]></title>
    <url>%2F2016%2F06%2F21%2Fgit%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8(1)%2F</url>
    <content type="text"><![CDATA[在一个项目中，凡是由开发人员编写的都算是源代码，而人为维护源代码则是一件非常让人头疼的事。因此，人们开发了很多代码管理工具，让源代码可以被追溯，记录每次变更了什么，谁主导这次变化等，git就是其中的一款工具。 Git工作原理为了更好的学习Git，我们们必须了解Git管理我们文件的3种状态，分别是已提交（committed）、已修改（modified）和已暂存（staged），由此引入 Git 项目的三个工作区域的概念：Git 仓库、工作目录以及暂存区域。 【Git仓库】目录是Git用来保存项目的元数据和对象数据库的地方这是。Git中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。 【工作目录】是对项目的某个版本独立提取出来的内容。 这些从Git仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。 【暂存区域】是一个文件，保存了下次将提交的文件列表信息，一般在Git仓库目录中。有时候也被称作“索引”（Index），不过一般说法还是叫暂存区域。 基本的Git工作流程如下: 在工作目录中修改文件。 暂存文件，将文件的快照放入暂存区域。 提交更新，找到暂存区域的文件，将快照永久性存储到Git仓库目录。 Git安装Window安装 点此下载Git客户端软件，和普通软件安装方式一样。 Linu安装 CentOS发行版：sudo yum install git Ubuntu发行版：sudo apt-get install git Mac安装 打开Terminal直接输入git命令，会自动提示，按提示引导安装即可。 Git本地仓库Git基础命令行方式：任意目录（建议开发目录）右键 &gt; Git Bash Here 配置用户12git config --global user.name "自已的名字"git config --global user.email "自已的邮箱地址" 其中–global指配置当前用户所有仓库，–system指配置当前计算机上所有用户的所有仓库。 初始化仓库1git init git init只是创建了一个名为.git的隐藏目录，这个目录就是存储我们历史版本的仓库，ls -al 可以查看。假如公司已有项目用了Git，那我们就利用克隆。 查看文件状态git status可以检测当前仓库文件的状态1git status 添加文件到暂存区git add file “*”或-A代表所有1git add * 放到暂存区的文件被标记成了绿色，等待提交。 提交文件git commit -m ‘备注信息’1git commit -m 'xxxx' 将暂存区被标记成绿色的文件，全部提交到仓库存储。 查看提交历史1git log 我们可以查看到一次提交记录，97b101e7d代表这次提交的唯一ID，一般称为SHA值。 这时我们对index.html文件做修改 再次检测仓库文件状态1git status 被修改过的文件被标记成了红色，等待重新添加到暂存区。 重新添加暂存区然后提交12git add index.htmlgit commit -m 'add some words' 再次查看历史git log 可查到所有提交历史1git log 这时可以查看到两次提交历史。这时关掉所有目录甚至关机！ 恢复上一次提交的状态git reset –hard 97b101e7d,查看index.html发现回到了没有修改的状态。git log再次查看发现提交历史只有一个了。123git reset --hard 97b101e7d...git log 这时我们非常容易就回到了曾经的一个历史版本。 仓库示意图]]></content>
      <categories>
        <category>辅助工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gulp学习笔记]]></title>
    <url>%2F2016%2F06%2F16%2Fgulp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Gulp.js是一个前端构建工具,与gruntjs相比,gulpjs无需写一大堆繁杂的配置参数,API也非常简单,学习成本低。 Gulp简介 链接： 官网 中文网 Gulp.js 是一个自动化构建工具,开发者可以使用它在项目开发过程中自动执行常见任务。Gulp.js 是基于 Node.js 构建的,利用 Node.js 流的威力,你可以快速构建项目并减少频繁的 IO 操作。Gulp.js 源文件和你用来定义任务的 Gulp 文件都是通过 JavaScript（或者 CoffeeScript ）源码来实现的。 Gulp.js 是用来机械化的完成重复性质的工作，其机制就是将重复工作抽象成一个个的任务。 Gulp准备工作 安装Node.js 安装 gulp 命令行工具 npm install -g gulp 初始化 gulp 项目 创建任务 - gulpfile.js 基本使用安装所需插件 安装所需插件，如LESS编译、压缩需要gulp-less、gulp-cssnano等,包括浏览器同步插件browser-sync。 在gulpfile.js中使用时要先引入。 1$ npm install gulp-less gulp-cssnano --save-dev 在gulpfile中先载入gulp包，因为这个包提供了一些API 12&apos;use strict&apos;;var gulp = require(&apos;gulp&apos;); LESS编译、压缩、合并1234567891011121314var less = require(&apos;gulp-less&apos;);var cssnano = require(&apos;gulp-cssnano&apos;);// 1. LESS编译 压缩 --合并没有必要，一般预处理CSS都可以导包gulp.task(&apos;style&apos;, function() &#123; // 这里是在执行style任务时自动执行的 gulp.src([&apos;src/styles/*.less&apos;, &apos;!src/styles/_*.less&apos;]) .pipe(less()) .pipe(cssnano()) .pipe(gulp.dest(&apos;dist/styles&apos;)) .pipe(browserSync.reload(&#123; stream: true &#125;));&#125;); JS合并、压缩、混淆12345678910111213var concat = require(&apos;gulp-concat&apos;);var uglify = require(&apos;gulp-uglify&apos;);// 2. JS合并 压缩混淆gulp.task(&apos;script&apos;, function() &#123; gulp.src(&apos;src/scripts/*.js&apos;) .pipe(concat(&apos;all.js&apos;)) .pipe(uglify()) .pipe(gulp.dest(&apos;dist/scripts&apos;)) .pipe(browserSync.reload(&#123; stream: true &#125;));&#125;); img复制12345678// 3. 图片复制gulp.task(&apos;image&apos;, function() &#123; gulp.src(&apos;src/images/*.*&apos;) .pipe(gulp.dest(&apos;dist/images&apos;)) .pipe(browserSync.reload(&#123; stream: true &#125;));&#125;); html压缩1234567891011121314var htmlmin = require(&apos;gulp-htmlmin&apos;);// 4. HTMLgulp.task(&apos;html&apos;, function() &#123; gulp.src(&apos;src/*.html&apos;) .pipe(htmlmin(&#123; collapseWhitespace: true, removeComments: true &#125;)) .pipe(gulp.dest(&apos;dist&apos;)) .pipe(browserSync.reload(&#123; stream: true &#125;));&#125;); 定义任务、开启同步更新123456789101112131415var browserSync = require(&apos;browser-sync&apos;);gulp.task(&apos;serve&apos;, function() &#123; browserSync(&#123; server: &#123; baseDir: [&apos;dist&apos;] &#125;, &#125;, function(err, bs) &#123; console.log(bs.options.getIn([&quot;urls&quot;, &quot;local&quot;])); &#125;); gulp.watch(&apos;src/styles/*.less&apos;,[&apos;style&apos;]); gulp.watch(&apos;src/scripts/*.js&apos;,[&apos;script&apos;]); gulp.watch(&apos;src/images/*.*&apos;,[&apos;image&apos;]); gulp.watch(&apos;src/*.html&apos;,[&apos;html&apos;]);&#125;); 常用插件 编译 Less：gulp-less 创建本地服务器：gulp-connect 合并文件：gulp-concat 最小化 js 文件：gulp-uglify 重命名文件：gulp-rename 最小化 css 文件：gulp-minify-css 压缩html文件 gulp-minify-html 最小化图像：gulp-imagemin]]></content>
      <categories>
        <category>构建工具</category>
      </categories>
      <tags>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[node基础与环境搭建]]></title>
    <url>%2F2016%2F06%2F12%2Fnode%E5%9F%BA%E7%A1%80%E4%B8%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型,使其轻量又高效。在此将学习使用node过程及自己的一些理解做些记录。 Node基础概念 Node.js 不是JS文件，也不是一个JS框架 Node.js 是Server side Javascript runtime，服务端的一个JS运行时、运行环境 我们可以在NODE运行JS代码，但只能运行ECMAScript，无法使用 BOM 和 DOM 目前我们的JS是运行在浏览器内核中，但Node.js可以使JS在服务端运行 目前有两个分支 Node.js 0.12.7 官方版本 要求尽善尽美 IO.js 是社区的产物，非官方产物，其有很多新特性，迭代快，社区推进快 15年两者合并，发布node第一个正式版 4.0， 迭代速度又慢了 node 5.x == io.js node 4.0 == node Node.js是一个轻内核（本身没有什么功能）的东东，所有的功能都要功能包提供 node官方提供了一些最基础的包 Node安装Mac版 安装包的方式 pkg NVM（Node Version Manager）方式 1234$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash$ echo '. ~/.nvm/nvm.sh' &gt;&gt; .bash_profile$ nvm install stable$ nvm alias default stable Windows版 安装包的方式 msi_x64 msi_x86 NVM（Node Version Manager）方式 因为NODE版本比较多，开发人员可能依赖很多版本，通过NVM，可以轻松切换于不同的版本之间 例如通过以下命令可以切换当前Node版本为4.5.0 1$ nvm use v4.5.0 其它命令 1234$ nvm use [对应的版本号] [平台架构（如果是32系统需要写32,64位不用管）]$ nvm install &lt;version&gt; [arch] 安装$ nvm uninstall &lt;version&gt; 卸载$ nvm list 查看已经安装版本 NPM node package manager(node的包管理工具) npm管理包非常方便，我们只需要记住使用哪个包就可以了,安装node时会自动安装npm 使用 npm install xxx 安装一个包到项目本地，必须要联网 安装完成过后项目根目录下会多一个node_modules文件夹，所有的下载下来的包全部在里面 由于需要记录项目依赖哪些东西，所以需要一个配置文件“package.json”，可以通过npm init命令生成 以后安装包的时候将其–save –save就是将我们安装的包名字和包版本记录到配置文件中的dependencies节点中 –save-dev 项目依赖分两种，一个就是普通的项目依赖比如bootstrap，还用一种只是开发阶段需要用的，这种属于开发依赖比如gulp，开发依赖最终记录在devDependencies节点里面 npm uninstall xxx –save npm install xxx -g(全局安装包) 如果你安装的是一个工具，工具要在每一个地方都能用，这种情况下一般全局安装。 Bower Web sites are made of lots of things ― frameworks, libraries, assets, and utilities. Bower manages all these things for you. Bower就是用来管理项目中所有的依赖，主要用于Web页面开发时使用的包管理，比如jquery，bootstrap 重复的轮子太多，抓住轮子与轮子之间的共性 环境变量 环境变量就是操作系统提供的系统级别用于存储变量的地方，分为系统变量和用户变量 系统变量指的是所用当前系统用户共享的变量 用户变量值当前的系统用户独享的变量 建议将自己配置的环境变量放在用户变量中 注：环境变量的变量名是不区分大小写的，变量间运行可以相互引用 特殊值PATH： PATH变量（不区分大小写），相当于一个路径的引用 只要添加到PATH变量中的路径，都可以在任何目录下搜索 Node相关环境变量配置假设nvm安装目录为C:\Develop\，nodejs安装目录为C:\Develop\，npm安装目录为C:\Develop\nvm\，需要配置的环境变量如下： 1234567NVM_HOME=C:\Develop\nvmNVM_SYMLINK=C:\Develop\nodejsNPM_HOME=C:\Develop\nvm\npmPATH=%NVM_HOME%;%NVM_SYMLINK%;%NPM_HOME%]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>nvm</tag>
        <tag>环境变量</tag>
      </tags>
  </entry>
</search>
