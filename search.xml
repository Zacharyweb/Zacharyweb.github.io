<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[webpack踩坑记录]]></title>
    <url>%2F2017%2F08%2F17%2Fwebpack%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[ios和android 浏览器适配问题记录]]></title>
    <url>%2F2017%2F08%2F11%2Fios%E5%92%8Candroid%20%E6%B5%8F%E8%A7%88%E5%99%A8%E9%80%82%E9%85%8D%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[参与手机端页面开发也有一段时间了，在此记录一些工作中遇到的ios和android 浏览器适配问题以及相应的解决方案，会持续更新。 IOS移动端click事件300ms的延迟响应12345678移动设备上的web网页是有300ms延迟的，玩玩会造成按钮点击延迟甚至是点击失效。这是由于区分单击事件和双击屏幕缩放的历史原因造成的,2007年苹果发布首款iphone上IOS系统搭载的safari为了将适用于PC端上大屏幕的网页能比较好的展示在手机端上，使用了双击缩放(double tap to zoom)的方案，比如你在手机上用浏览器打开一个PC上的网页，你可能在看到页面内容虽然可以撑满整个屏幕，但是字体、图片都很小看不清，此时可以快速双击屏幕上的某一部分，你就能看清该部分放大后的内容，再次双击后能回到原始状态。双击缩放是指用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。原因就出在浏览器需要如何判断快速点击上，当用户在屏幕上单击某一个元素时候，例如跳转链接&lt;a href=&quot;#&quot;&gt;&lt;/a&gt;，此处浏览器会先捕获该次单击，但浏览器不能决定用户是单纯要点击链接还是要双击该部分区域进行缩放操作，所以，捕获第一次单击后，浏览器会先Hold一段时间t，如果在t时间区间里用户未进行下一次点击，则浏览器会做单击跳转链接的处理，如果t时间里用户进行了第二次单击操作，则浏览器会禁止跳转，转而进行对该部分区域页面的缩放操作。那么这个时间区间t有多少呢？在IOS safari下，大概为300毫秒。这就是延迟的由来。造成的后果用户纯粹单击页面，页面需要过一段时间才响应，给用户慢体验感觉，对于web开发者来说是，页面js捕获click事件的回调函数处理，需要300ms后才生效，也就间接导致影响其他业务逻辑的处理。解决方案：fastclick可以解决在手机上点击事件的300ms延迟zepto的touch模块，tap事件也是为了解决在click的延迟问题触摸事件的响应顺序为 touchstart --&gt; touchmove --&gt; touchend --&gt; click,也可以通过绑定ontouchstart事件，加快对事件的响应，解决300ms延迟问题 一些情况下对非可点击元素如(label,span)监听click事件，ios下不会触发1解决方案：css增加cursor:pointer; 三星手机遮罩层下的input、select、a等元素可以被点击和focus(点击穿透)123问题发现于三星手机，这个在特定需求下才会有，因此如果没有类似问题的可以不看。首先需求是浮层操作，在三星上被遮罩的元素依然可以获取focus、click、change)，有两种解决方案：1.是通过层显示以后加入对应的class名控制，截断显示层下方可获取焦点元素的事件获取2.是通过将可获取焦点元素加入的disabled属性，也可以利用属性加dom锁定的方式（disabled的一种变换方式） h5页面当输入框在最底部，点击软键盘后输入框会被遮挡。123456789//可采用如下方式解决var oHeight = $(document).height(); //浏览器当前的高度$(window).resize(function()&#123; if($(document).height() &lt; oHeight)&#123; $(&quot;#footer&quot;).css(&quot;position&quot;,&quot;static&quot;); &#125;else&#123; $(&quot;#footer&quot;).css(&quot;position&quot;,&quot;absolute&quot;); &#125; &#125;); 不让 Android 手机识别邮箱1&lt;meta content=&quot;email=no&quot; name=&quot;format-detection&quot; /&gt; 禁止 iOS 识别长串数字为电话1&lt;meta content=&quot;telephone=no&quot; name=&quot;format-detection&quot; /&gt; 禁止 iOS 弹出各种操作窗口1-webkit-touch-callout:none 禁止ios和android用户选中文字1-webkit-user-select:none ios下取消input在输入的时候英文首字母的默认大写1&lt;input autocapitalize=&quot;off&quot; autocorrect=&quot;off&quot; /&gt; 在ios和andriod中,audio元素和video元素无法自动播放1$(&apos;html&apos;).one(&apos;touchstart&apos;,function()&#123; audio.play()&#125;) 参考链接：http://www.jianshu.com/p/31e53df2ecce來源：简书]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>ios</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[仿Vue双向绑定demo]]></title>
    <url>%2F2017%2F05%2F12%2F%E4%BB%BFVue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9Ademo%2F</url>
    <content type="text"><![CDATA[本文主要尝试使用es6新特性Object.defineProperty()来实现一个简单的双向绑定案例。相关代码已经放在 Github，会持续更新。 Vue双向绑定实现过程从开始接触Vue开始，我们便对它的“数据响应”赞叹不绝。我们知道，Vue的双向绑定是基于es6的Object.defineProperty()方法实现的，Vue通过Object.defineProperty()来实现对数据的劫持，并触发对视图的更新工作。展开来说，当数据改变时，Object.defineProperty()对属性设置一个set函数，当数据改变时就会触发这个函数，所以我们只要将更新方法放在里面就可以实现数据到视图的更新了。如果还不熟悉其用法，请点击这里阅读更多用法。 本案例实现步骤1.实现一个监听器Observer，用来劫持并监听所有属性，如有变动，就通知订阅者Watcher。2.实现一个订阅者Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。3.实现一个关联者Dep，将Observer和Watcher关联起来。4.实现一个解析器Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。 实现一个ObserverObserver是一个数据监听器，其实现核心方法就是前文所说的Object.defineProperty( )。如果要对所有属性都进行监听的话，那么可以通过递归方法遍历所有属性值，并对其进行Object.defineProperty( )处理。思路分析中，还需要创建一个可以容纳订阅者的消息订阅器Dep，订阅器Dep主要负责收集订阅者，然后再属性变化的时候执行对应订阅者的更新函数。所以显然订阅器需要有一个容器，这个容器就是list，将上面的Observer稍微改造下，植入消息订阅器：123456789101112131415161718192021222324252627282930313233343536function defineReactive(data, key, val) &#123; observe(val); // 递归遍历所有子属性 var dep = new Dep(); Object.defineProperty(data, key, &#123; enumerable: true, configurable: true, get: function() &#123; if (是否需要添加订阅者) &#123; dep.addSub(watcher); // 在这里添加一个订阅者 &#125; return val; &#125;, set: function(newVal) &#123; if (val === newVal) &#123; return; &#125; val = newVal; console.log(&apos;属性&apos; + key + &apos;已经被监听了，现在值为：“&apos; + newVal.toString() + &apos;”&apos;); dep.notify(); // 如果数据变化，通知所有订阅者 &#125; &#125;);&#125; function Dep () &#123; this.subs = [];&#125;Dep.prototype = &#123; addSub: function(sub) &#123; this.subs.push(sub); &#125;, notify: function() &#123; this.subs.forEach(function(sub) &#123; sub.update(); &#125;); &#125;&#125;; 从代码上看，我们将订阅器Dep添加一个订阅者设计在getter里面，这是为了让Watcher初始化进行触发，因此需要判断是否要添加订阅者，至于具体设计方案，下文会详细说明的。在setter函数里面，如果数据变化，就会去通知所有订阅者，订阅者们就会去执行对应的更新的函数。到此为止，一个比较完整Observer已经实现了，接下来我们开始设计Watcher。 实现Watcher订阅者Watcher在初始化的时候需要将自己添加进订阅器Dep中，那该如何添加呢？我们已经知道监听器Observer是在get函数执行了添加订阅者Wather的操作的，所以我们只要在订阅者Watcher初始化的时候出发对应的get函数去执行添加订阅者操作即可，那要如何触发get的函数，再简单不过了，只要获取对应的属性值就可以触发了，核心原因就是因为我们使用了Object.defineProperty( )进行数据监听。这里还有一个细节点需要处理，我们只要在订阅者Watcher初始化的时候才需要添加订阅者，所以需要做一个判断操作，因此可以在订阅器上做一下手脚：在Dep.target上缓存下订阅者，添加成功后再将其去掉就可以了。订阅者Watcher的实现如下：1234567891011121314151617181920212223242526function Watcher(vm, exp, cb) &#123; this.cb = cb; this.vm = vm; this.exp = exp; this.value = this.get(); // 将自己添加到订阅器的操作&#125; Watcher.prototype = &#123; update: function() &#123; this.run(); &#125;, run: function() &#123; var value = this.vm.data[this.exp]; var oldVal = this.value; if (value !== oldVal) &#123; this.value = value; this.cb.call(this.vm, value, oldVal); &#125; &#125;, get: function() &#123; Dep.target = this; // 缓存自己 var value = this.vm.data[this.exp] // 强制执行监听器里的get函数 Dep.target = null; // 释放自己 return value; &#125;&#125;; 这时候，我们需要对监听器Observer也做个稍微调整，主要是对应Watcher类原型上的get函数。需要调整地方在于defineReactive函数：1234567891011121314151617181920212223function defineReactive(data, key, val) &#123; observe(val); // 递归遍历所有子属性 var dep = new Dep(); Object.defineProperty(data, key, &#123; enumerable: true, configurable: true, get: function() &#123; if (Dep.target) &#123;. // 判断是否需要添加订阅者 dep.addSub(Dep.target); // 在这里添加一个订阅者 &#125; return val; &#125;, set: function(newVal) &#123; if (val === newVal) &#123; return; &#125; val = newVal; console.log(&apos;属性&apos; + key + &apos;已经被监听了，现在值为：“&apos; + newVal.toString() + &apos;”&apos;); dep.notify(); // 如果数据变化，通知所有订阅者 &#125; &#125;);&#125;Dep.target = null; 到此为止，简单版的Watcher设计完毕，这时候我们只要将Observer和Watcher关联起来，就可以实现一个简单的双向绑定数据了。因为这里没有还没有设计解析器Compile，所以对于模板数据我们都进行写死处理，假设模板上又一个节点，且id号为’name’，并且双向绑定的绑定的变量也为’name’，且是通过两个大双括号包起来（这里只是为了掩饰，暂时没什么用处），模板如下：123&lt;body&gt; &lt;h1 id=&quot;name&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;&lt;/body&gt; 这时候我们需要将Observer和Watcher关联起来：123456789function DemoVue (data, el, exp) &#123; this.data = data; observe(data); el.innerHTML = this.data[exp]; // 初始化模板数据的值 new Watcher(this, exp, function (value) &#123; el.innerHTML = value; &#125;); return this;&#125; 然后在页面上new以下DemoVue类，就可以实现数据的双向绑定了：123456789101112131415161718&lt;body&gt; &lt;h1 id=&quot;name&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt;&lt;/body&gt;&lt;script src=&quot;js/observer.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/watcher.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/index.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; var ele = document.querySelector(&apos;#name&apos;); var selfVue = new DemoVue(&#123; name: &apos;hello world&apos; &#125;, ele, &apos;name&apos;); window.setTimeout(function () &#123; console.log(&apos;name值改变了&apos;); selfVue.data.name = &apos;canfoo&apos;; &#125;, 2000); &lt;/script&gt; 这时候打开页面，可以看到页面刚开始显示了是’hello world’，过了2s后就变成’canfoo’了。到这里，总算大功告成一半了，但是还有一个细节问题，我们在赋值的时候是这样的形式 ‘ selfVue.data.name = ‘canfoo’ ‘ 而我们理想的形式是’ selfVue.name = ‘canfoo’ ‘为了实现这样的形式，我们需要在new DemoVue的时候做一个代理处理，让访问selfVue的属性代理为访问selfVue.data的属性，实现原理还是使用Object.defineProperty( )对属性值再包一层：12345678910111213141516171819202122232425262728293031function DemoVue (data, el, exp) &#123; var self = this; this.data = data; Object.keys(data).forEach(function(key) &#123; self.proxyKeys(key); // 绑定代理属性 &#125;); observe(data); el.innerHTML = this.data[exp]; // 初始化模板数据的值 new Watcher(this, exp, function (value) &#123; el.innerHTML = value; &#125;); return this;&#125; DemoVue.prototype = &#123; proxyKeys: function (key) &#123; var self = this; Object.defineProperty(this, key, &#123; enumerable: false, configurable: true, get: function proxyGetter() &#123; return self.data[key]; &#125;, set: function proxySetter(newVal) &#123; self.data[key] = newVal; &#125; &#125;); &#125;&#125; 实现Compile虽然上面已经实现了一个双向数据绑定的例子，但是整个过程都没有去解析dom节点，而是直接固定某个节点进行替换数据的，所以接下来需要实现一个解析器Compile来做解析和绑定工作。解析器Compile实现步骤：1.解析模板指令，并替换模板数据，初始化视图2.将模板指令对应的节点绑定对应的更新函数，初始化相应的订阅器为了解析模板，首先需要获取到dom元素，然后对含有dom元素上含有指令的节点进行处理，因此这个环节需要对dom操作比较频繁，所有可以先建一个fragment片段，将需要解析的dom节点存入fragment片段里再进行处理：12345678910function nodeToFragment (el) &#123; var fragment = document.createDocumentFragment(); var child = el.firstChild; while (child) &#123; // 将Dom元素移入fragment中 fragment.appendChild(child); child = el.firstChild &#125; return fragment;&#125; 接下来需要遍历各个节点，对含有相关指定的节点进行特殊处理，这里咱们先处理最简单的情况，只对带有双花括号这种形式的指令进行处理： 123456789101112131415161718192021222324252627function compileElement (el) &#123; var childNodes = el.childNodes; var self = this; [].slice.call(childNodes).forEach(function(node) &#123; var reg = /\&#123;\&#123;(.*)\&#125;\&#125;/; var text = node.textContent; if (self.isTextNode(node) &amp;&amp; reg.test(text)) &#123; // 判断是否是符合这种形式&#123;&#123;&#125;&#125;的指令 self.compileText(node, reg.exec(text)[1]); &#125; if (node.childNodes &amp;&amp; node.childNodes.length) &#123; self.compileElement(node); // 继续递归遍历子节点 &#125; &#125;);&#125;,function compileText (node, exp) &#123; var self = this; var initText = this.vm[exp]; this.updateText(node, initText); // 将初始化的数据初始化到视图中 new Watcher(this.vm, exp, function (value) &#123; // 生成订阅器并绑定更新函数 self.updateText(node, value); &#125;);&#125;,function (node, value) &#123; node.textContent = typeof value == &apos;undefined&apos; ? &apos;&apos; : value;&#125; 获取到最外层节点后，调用compileElement函数，对所有子节点进行判断，如果节点是文本节点且匹配双花括号这种形式指令的节点就开始进行编译处理，编译处理首先需要初始化视图数据，对应上面所说的步骤1，接下去需要生成一个并绑定更新函数的订阅器，对应上面所说的步骤2。这样就完成指令的解析、初始化、编译三个过程，一个解析器Compile也就可以正常的工作了。为了将解析器Compile与监听器Observer和订阅者Watcher关联起来，我们需要再修改一下类DemoVue函数：12345678910111213function DemoVue (options) &#123; var self = this; this.vm = this; this.data = options; Object.keys(this.data).forEach(function(key) &#123; self.proxyKeys(key); &#125;); observe(this.data); new Compile(options, this.vm); return this;&#125; 更改后，我们就不要像之前通过传入固定的元素值进行双向绑定了，可以随便命名各种变量进行双向绑定了：1234567891011121314151617181920212223242526272829&lt;body&gt; &lt;div id=&quot;app&quot;&gt; &lt;h2&gt;&#123;&#123;title&#125;&#125;&lt;/h2&gt; &lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;/h1&gt; &lt;/div&gt;&lt;/body&gt;&lt;script src=&quot;js/observer.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/watcher.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/compile.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/index.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; var selfVue = new DemoVue(&#123; el: &apos;#app&apos;, data: &#123; title: &apos;hello world&apos;, name: &apos;&apos; &#125; &#125;); window.setTimeout(function () &#123; selfVue.title = &apos;你好&apos;; &#125;, 2000); window.setTimeout(function () &#123; selfVue.name = &apos;canfoo&apos;; &#125;, 2500); &lt;/script&gt; 如上代码，在页面上可观察到，刚开始titile和name分别被初始化为 ‘hello world’ 和空，2s后title被替换成 ‘你好’ 3s后name被替换成 ‘canfoo’ 了。]]></content>
  </entry>
</search>
